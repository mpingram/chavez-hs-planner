{"ast":null,"code":"import _classCallCheck from \"/home/michael/code/chavez-hs-planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/michael/code/chavez-hs-planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/michael/code/chavez-hs-planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/michael/code/chavez-hs-planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/michael/code/chavez-hs-planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/michael/code/chavez-hs-planner/src/path-to-hs/components/hs-display/search-bar.tsx\";\nimport * as React from \"react\";\nimport * as Autosuggest from \"react-autosuggest\";\nimport { store } from \"shared/redux/store\";\n\nvar getProgramDict = function getProgramDict(state) {\n  return state.data.hsPrograms;\n};\n/* getSuggestions gets a list of search suggestions for highschool programs from \n * a ProgramDictionary. The numSuggestions argument determines how many suggestions to return. */\n\n\nvar getSuggestions = function getSuggestions(programDict, query) {\n  var numSuggestions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n\n  var getMatch = function getMatch(query, str) {\n    var q = query.trim().toLowerCase();\n    var s = str.trim().toLowerCase();\n\n    var isLeftSubstring = function isLeftSubstring(q, s) {\n      return s.slice(0, q.length) === q;\n    };\n\n    var start = 0;\n    var end = 0; // at the start of each word boundary in s, check for a match\n\n    var doesMatch = s.split('').some(function (char, i) {\n      if (i === 0) {\n        if (isLeftSubstring(q, s)) {\n          start = i;\n          end = start + q.length;\n          return true;\n        }\n      }\n\n      if (char === \" \") {\n        var rightString = s.slice(i + 1);\n\n        if (isLeftSubstring(q, rightString)) {\n          start = i + 1;\n          end = start + q.length;\n          return true;\n        }\n      }\n\n      return false;\n    });\n    return {\n      doesMatch: doesMatch,\n      start: start,\n      end: end\n    };\n  }; // use hash maps to store matches without repeats.\n  // (programTypes and schools are not unique to programs,\n  // so we would have to check for duplicates otherwise).\n\n\n  var programTypeMatches = {};\n  var schoolMatches = {};\n  var programMatches = {}; // Iterate through ProgramDict until we have numSuggestions matches.\n  // Object.some is used here to exit from the iteration early. We'll\n  // return true once we've got ten matches, or we'll reach\n  // the end of the array.\n\n  Object.keys(programDict).some(function (programID) {\n    var program = programDict[programID];\n    var programTypeMatch = getMatch(query, program.programType);\n\n    if (programTypeMatch.doesMatch) {\n      programTypeMatches[program.programType] = programTypeMatch;\n    }\n\n    var schoolMatch = getMatch(query, program.schoolNameLong);\n\n    if (schoolMatch.doesMatch) {\n      schoolMatches[program.schoolNameLong] = schoolMatch;\n    }\n\n    var programMatch = getMatch(query, program.programName);\n\n    if (programMatch.doesMatch) {\n      programMatches[program.programName] = programMatch;\n    } // see how many matches we have; if we have enough, exit early.\n\n\n    var numProgramTypeMatches = Object.keys(programTypeMatches).length;\n    var numSchoolMatches = Object.keys(schoolMatches).length;\n    var numProgramMatches = Object.keys(programMatches).length;\n\n    if (numProgramTypeMatches + numSchoolMatches + numProgramMatches >= numSuggestions) {\n      return true;\n    } else {\n      return false;\n    }\n  }); // convert our hash maps of matches to a Suggestions object\n\n  var suggestions = [];\n\n  if (Object.keys(programTypeMatches).length !== 0) {\n    suggestions.push({\n      title: \"Program Types\",\n      suggestions: Object.keys(programTypeMatches).map(function (value) {\n        var match = programTypeMatches[value];\n        return {\n          value: value,\n          matchStart: match.start,\n          matchEnd: match.end\n        };\n      })\n    });\n  }\n\n  if (Object.keys(schoolMatches).length !== 0) {\n    suggestions.push({\n      title: \"Schools\",\n      suggestions: Object.keys(schoolMatches).map(function (value) {\n        var match = schoolMatches[value];\n        return {\n          value: value,\n          matchStart: match.start,\n          matchEnd: match.end\n        };\n      })\n    });\n  }\n\n  if (Object.keys(programMatches).length !== 0) {\n    suggestions.push({\n      title: \"Programs\",\n      suggestions: Object.keys(programMatches).map(function (value) {\n        var match = programMatches[value];\n        return {\n          value: value,\n          matchStart: match.start,\n          matchEnd: match.end\n        };\n      })\n    });\n  }\n\n  return suggestions;\n};\n\nimport SearchIcon from \"shared/components/icons/search\";\nimport \"./search-bar.scss\";\nexport var SearchBar =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(SearchBar, _React$PureComponent);\n\n  function SearchBar(props) {\n    var _this;\n\n    _classCallCheck(this, SearchBar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SearchBar).call(this, props));\n\n    _this.renderSuggestion = function (suggestion, _ref) {\n      var query = _ref.query,\n          isHighlighted = _ref.isHighlighted;\n      // boldface the query part of each search suggestion\n      return React.createElement(\"div\", {\n        className: \"suggestion-item \".concat(isHighlighted ? \"is-highlighted\" : \"\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, suggestion.value.slice(0, suggestion.matchStart), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, suggestion.value.slice(suggestion.matchStart, suggestion.matchEnd)), suggestion.value.slice(suggestion.matchEnd));\n    };\n\n    _this.renderSectionTitle = function (section) {\n      return React.createElement(\"div\", {\n        className: \"section-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, section.title);\n    };\n\n    _this.handleSuggestionsFetchRequested = function (_ref2) {\n      var value = _ref2.value;\n\n      _this.setState({\n        suggestions: getSuggestions(getProgramDict(store.getState()), value)\n      });\n    };\n\n    _this.handleSuggestionsClearRequested = function () {\n      _this.setState({\n        suggestions: []\n      });\n    };\n\n    _this.handleQueryChange = function (ev, _ref3) {\n      var newValue = _ref3.newValue;\n\n      if (newValue === \"\") {\n        _this.props.onSearchSubmit(null);\n      }\n\n      _this.setState({\n        query: newValue\n      });\n    };\n\n    _this.handleSuggestionSelected = function (ev, _ref4) {\n      var suggestionValue = _ref4.suggestionValue;\n\n      _this.props.onSearchSubmit(suggestionValue);\n    };\n\n    _this.state = {\n      query: props.defaultValue,\n      suggestions: []\n    };\n    return _this;\n  }\n\n  _createClass(SearchBar, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"program-search-bar field has-addons\",\n        onKeyUp: function onKeyUp(ev) {\n          return ev.key === \"Enter\" && _this2.props.onSearchSubmit(_this2.state.query);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"control is-expanded\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(Autosuggest, {\n        inputProps: {\n          className: \"input\",\n          type: \"search\",\n          placeholder: \"Search for schools or programs...\",\n          value: this.state.query,\n          onChange: this.handleQueryChange\n        },\n        multiSection: true,\n        suggestions: this.state.suggestions,\n        renderSuggestion: this.renderSuggestion,\n        renderSectionTitle: this.renderSectionTitle,\n        getSectionSuggestions: function getSectionSuggestions(section) {\n          return section.suggestions;\n        },\n        getSuggestionValue: function getSuggestionValue(suggestion) {\n          return suggestion.value;\n        },\n        onSuggestionsClearRequested: this.handleSuggestionsClearRequested,\n        onSuggestionsFetchRequested: this.handleSuggestionsFetchRequested,\n        onSuggestionSelected: this.handleSuggestionSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"button\",\n        onClick: function onClick(ev) {\n          _this2.props.onSearchSubmit(_this2.state.query);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(SearchIcon, {\n        width: \"18px\",\n        height: \"18px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }), \"Search\")));\n    }\n    /*\n     * renderSuggestion returns the DOM of each suggestion in react-autosuggest element\n     * */\n\n  }]);\n\n  return SearchBar;\n}(React.PureComponent);","map":{"version":3,"sources":["/home/michael/code/chavez-hs-planner/src/path-to-hs/components/hs-display/search-bar.tsx"],"names":["React","Autosuggest","store","getProgramDict","state","data","hsPrograms","getSuggestions","programDict","query","numSuggestions","getMatch","str","q","trim","toLowerCase","s","isLeftSubstring","slice","length","start","end","doesMatch","split","some","char","i","rightString","programTypeMatches","schoolMatches","programMatches","Object","keys","programID","program","programTypeMatch","programType","schoolMatch","schoolNameLong","programMatch","programName","numProgramTypeMatches","numSchoolMatches","numProgramMatches","suggestions","push","title","map","value","match","matchStart","matchEnd","SearchIcon","SearchBar","props","renderSuggestion","suggestion","isHighlighted","renderSectionTitle","section","handleSuggestionsFetchRequested","setState","getState","handleSuggestionsClearRequested","handleQueryChange","ev","newValue","onSearchSubmit","handleSuggestionSelected","suggestionValue","defaultValue","key","className","type","placeholder","onChange","PureComponent"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as Autosuggest from \"react-autosuggest\";\nimport { createSelector } from \"reselect\";\n\nimport { AppState, ProgramDictionary } from \"shared/types\";\nimport { store } from \"shared/redux/store\";\n\ninterface Suggestion {\n  value: string\n  matchStart: number\n  matchEnd: number\n}\ntype Suggestions = Array<{\n  title: \"Programs\" | \"Program Types\" | \"Schools\"\n  suggestions: Suggestion[]\n}>;\n\n\nconst getProgramDict = (state: AppState) => state.data.hsPrograms;\n\n/* getSuggestions gets a list of search suggestions for highschool programs from \n * a ProgramDictionary. The numSuggestions argument determines how many suggestions to return. */\nconst getSuggestions = (programDict: ProgramDictionary, query: string, numSuggestions = 10 ): Suggestions => {\n\n  const getMatch = (query: string, str: string): {doesMatch: boolean, start: number, end: number} => {\n    const q = query.trim().toLowerCase();\n    const s = str.trim().toLowerCase();\n    const isLeftSubstring = (q,s) => s.slice(0, q.length) === q;\n\n    let start = 0;\n    let end = 0;\n\n    // at the start of each word boundary in s, check for a match\n    const doesMatch = s.split('').some( (char, i) => {\n      if (i === 0) {\n        if (isLeftSubstring(q, s)) {\n          start = i;\n          end = start + q.length;\n          return true;\n        }\n      }\n      if (char === \" \") {\n        const rightString = s.slice(i + 1);\n        if (isLeftSubstring(q, rightString)) {\n          start = i + 1;\n          end = start + q.length;\n          return true;\n        }\n      }\n      return false;\n    });\n\n    return {doesMatch, start, end};\n  };\n\n  // use hash maps to store matches without repeats.\n  // (programTypes and schools are not unique to programs,\n  // so we would have to check for duplicates otherwise).\n  let programTypeMatches = {};\n  let schoolMatches = {};\n  let programMatches = {};\n\n  // Iterate through ProgramDict until we have numSuggestions matches.\n  // Object.some is used here to exit from the iteration early. We'll\n  // return true once we've got ten matches, or we'll reach\n  // the end of the array.\n  Object.keys(programDict).some( programID => {\n    const program = programDict[programID];\n\n    const programTypeMatch = getMatch(query, program.programType);\n    if (programTypeMatch.doesMatch) {\n      programTypeMatches[program.programType] = programTypeMatch;\n    }\n    const schoolMatch = getMatch(query, program.schoolNameLong);\n    if (schoolMatch.doesMatch) {\n      schoolMatches[program.schoolNameLong] = schoolMatch;\n    }\n    const programMatch = getMatch(query, program.programName);\n    if (programMatch.doesMatch) {\n      programMatches[program.programName] = programMatch;\n    }\n\n    // see how many matches we have; if we have enough, exit early.\n    const numProgramTypeMatches = Object.keys(programTypeMatches).length;\n    const numSchoolMatches = Object.keys(schoolMatches).length;\n    const numProgramMatches = Object.keys(programMatches).length;\n    if (numProgramTypeMatches + numSchoolMatches + numProgramMatches >= numSuggestions) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n\n  // convert our hash maps of matches to a Suggestions object\n  let suggestions: Suggestions = [];\n  if (Object.keys(programTypeMatches).length !== 0) {\n    suggestions.push({\n      title: \"Program Types\",\n      suggestions: Object.keys(programTypeMatches).map( value => {\n        const match = programTypeMatches[value];\n        return {\n          value: value,\n          matchStart: match.start,\n          matchEnd: match.end\n        }\n      })\n    });\n  }\n  if (Object.keys(schoolMatches).length !== 0) {\n    suggestions.push({\n      title: \"Schools\",\n      suggestions: Object.keys(schoolMatches).map( value => {\n        const match = schoolMatches[value];\n        return {\n          value: value,\n          matchStart: match.start,\n          matchEnd: match.end\n        }\n      })\n    });\n  }\n  if (Object.keys(programMatches).length !== 0) {\n    suggestions.push({\n      title: \"Programs\",\n      suggestions: Object.keys(programMatches).map( value => {\n        const match = programMatches[value];\n        return {\n          value: value,\n          matchStart: match.start,\n          matchEnd: match.end\n        }\n      })\n    })\n  }\n  return suggestions;\n};\n\n\nimport SearchIcon from \"shared/components/icons/search\";\n\nimport \"./search-bar.scss\";\n\ninterface SearchBarProps {\n  placeholder: string\n  defaultValue: string\n  onSearchSubmit: (searchTerm: string | null) => any\n}\n\ninterface SearchBarState {\n  query: string\n  suggestions: Suggestions\n}\n\nexport class SearchBar extends React.PureComponent<SearchBarProps, SearchBarState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: props.defaultValue,\n      suggestions: []\n    }\n  }\n\n  render() {\n    return (\n      <div \n        className=\"program-search-bar field has-addons\"\n        onKeyUp={ ev => ev.key === \"Enter\" && this.props.onSearchSubmit(this.state.query) }\n      >\n        <div className=\"control is-expanded\">\n          <Autosuggest\n            inputProps={{\n              className:\"input\",\n              type:\"search\",\n              placeholder:\"Search for schools or programs...\",\n              value: this.state.query,\n              onChange: this.handleQueryChange\n            }}\n            multiSection={true}\n            suggestions={this.state.suggestions}\n            renderSuggestion={this.renderSuggestion}\n            renderSectionTitle={this.renderSectionTitle}\n            getSectionSuggestions={ section => section.suggestions }\n            getSuggestionValue={ suggestion => {\n              return suggestion.value;\n            }}\n            onSuggestionsClearRequested={this.handleSuggestionsClearRequested}\n            onSuggestionsFetchRequested={this.handleSuggestionsFetchRequested}\n            onSuggestionSelected={this.handleSuggestionSelected}\n          />\n        </div>\n        <div className=\"control\">\n          <button\n            className=\"button\"\n            onClick={ ev => {\n              this.props.onSearchSubmit(this.state.query);\n            }}\n          >\n          <SearchIcon width=\"18px\" height=\"18px\"/>\n          Search\n        </button>\n      </div>\n    </div>\n    );\n  }\n\n  /*\n   * renderSuggestion returns the DOM of each suggestion in react-autosuggest element\n   * */\n  private renderSuggestion = (suggestion: Suggestion, {query, isHighlighted}): React.ReactNode => {\n    // boldface the query part of each search suggestion\n    return <div className={`suggestion-item ${isHighlighted ? \"is-highlighted\" : \"\"}`}>\n      {suggestion.value.slice(0, suggestion.matchStart)}\n      <strong>{suggestion.value.slice(suggestion.matchStart, suggestion.matchEnd)}</strong>\n      {suggestion.value.slice(suggestion.matchEnd)}\n    </div>\n  }\n  private renderSectionTitle = (section): React.ReactNode => {\n    return <div className=\"section-title\">{section.title}</div>\n  }\n\n  private handleSuggestionsFetchRequested = ({value}): void => {\n    this.setState({\n      suggestions: getSuggestions(getProgramDict(store.getState()), value)\n    });\n  }\n\n  private handleSuggestionsClearRequested = (): void => {\n    this.setState({\n      suggestions: []\n    });\n  }\n\n  private handleQueryChange = (ev, {newValue}) => {\n    if (newValue === \"\") {\n      this.props.onSearchSubmit(null);\n    }\n    this.setState({\n      query: newValue,\n    });\n  }\n\n  private handleSuggestionSelected = (ev, {suggestionValue}) => {\n    this.props.onSearchSubmit(suggestionValue);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}