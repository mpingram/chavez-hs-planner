{"ast":null,"code":"var pointInPolygon = function pointInPolygon(point, polygon) {\n  // ray-casting algorithm based on\n  // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n  var x = point[0],\n      y = point[1];\n  var inside = false;\n\n  for (var i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    var xi = polygon[i][0],\n        yi = polygon[i][1];\n    var xj = polygon[j][0],\n        yj = polygon[j][1];\n    var intersect = yi > y != yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n    if (intersect) inside = !inside;\n  }\n\n  return inside;\n};\n\nexport default pointInPolygon;","map":{"version":3,"sources":["/home/michael/code/chavez-hs-planner/src/shared/util/point-in-polygon.ts"],"names":["pointInPolygon","point","polygon","x","y","inside","i","j","length","xi","yi","xj","yj","intersect"],"mappings":"AAAA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAA0BC,OAA1B,EAAmE;AACxF;AACA;AAEA,MAAIC,CAAC,GAAGF,KAAK,CAAC,CAAD,CAAb;AAAA,MAAkBG,CAAC,GAAGH,KAAK,CAAC,CAAD,CAA3B;AAEA,MAAII,MAAM,GAAG,KAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,OAAO,CAACM,MAAR,GAAiB,CAArC,EAAwCF,CAAC,GAAGJ,OAAO,CAACM,MAApD,EAA4DD,CAAC,GAAGD,CAAC,EAAjE,EAAqE;AACjE,QAAIG,EAAE,GAAGP,OAAO,CAACI,CAAD,CAAP,CAAW,CAAX,CAAT;AAAA,QAAwBI,EAAE,GAAGR,OAAO,CAACI,CAAD,CAAP,CAAW,CAAX,CAA7B;AACA,QAAIK,EAAE,GAAGT,OAAO,CAACK,CAAD,CAAP,CAAW,CAAX,CAAT;AAAA,QAAwBK,EAAE,GAAGV,OAAO,CAACK,CAAD,CAAP,CAAW,CAAX,CAA7B;AAEA,QAAIM,SAAS,GAAKH,EAAE,GAAGN,CAAN,IAAaQ,EAAE,GAAGR,CAAnB,IACRD,CAAC,GAAG,CAACQ,EAAE,GAAGF,EAAN,KAAaL,CAAC,GAAGM,EAAjB,KAAwBE,EAAE,GAAGF,EAA7B,IAAmCD,EAD/C;AAEA,QAAII,SAAJ,EAAeR,MAAM,GAAG,CAACA,MAAV;AAClB;;AAED,SAAOA,MAAP;AACD,CAjBD;;AAmBA,eAAeL,cAAf","sourcesContent":["const pointInPolygon = (point: [number, number], polygon: [number, number][]): boolean => {\n  // ray-casting algorithm based on\n  // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n  \n  var x = point[0], y = point[1];\n  \n  var inside = false;\n  for (var i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n      var xi = polygon[i][0], yi = polygon[i][1];\n      var xj = polygon[j][0], yj = polygon[j][1];\n      \n      var intersect = ((yi > y) != (yj > y))\n          && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n      if (intersect) inside = !inside;\n  }\n  \n  return inside;\n};\n\nexport default pointInPolygon;\n"]},"metadata":{},"sourceType":"module"}