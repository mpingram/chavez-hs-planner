{"ast":null,"code":"import { SuccessChance } from \"../../../shared/enums/success-chance\";\nimport { ifInProximity, ifSiblingAttends, everyone } from \"./filters\";\nexport var LotteryStageSize;\n\n(function (LotteryStageSize) {\n  LotteryStageSize[LotteryStageSize[\"SMALL\"] = 0] = \"SMALL\";\n  LotteryStageSize[LotteryStageSize[\"LARGE\"] = 1] = \"LARGE\";\n})(LotteryStageSize || (LotteryStageSize = {}));\n\nexport var PROXIMITY_LOTTERY_STAGE = {\n  // TODO confirm that this is how this works\n  filter: ifInProximity,\n  size: LotteryStageSize.LARGE\n};\nexport var SIBLING_LOTTERY_STAGE = {\n  filter: ifSiblingAttends,\n  size: LotteryStageSize.SMALL\n};\nexport var GENERAL_LOTTERY_STAGE = {\n  filter: everyone,\n  size: LotteryStageSize.LARGE\n}; // We're treating tiered lottery stage (where even numbers of applicants are\n// accepted by tier) like general lottery stages (where applicants are \n// accepted purely randomly). Because we don't have any way of saying\n// how likely students are to get in in tiered vs general lotteries,\n// this is OK.\n\nexport var TIER_LOTTERY_STAGE = {\n  filter: everyone,\n  size: LotteryStageSize.LARGE\n};\nexport var lottery = function lottery() {\n  for (var _len = arguments.length, stages = new Array(_len), _key = 0; _key < _len; _key++) {\n    stages[_key] = arguments[_key];\n  }\n\n  // stage logic:\n  // SMALL stage and no previous LARGE stages => LIKELY.\n  // SMALL stage and prev LARGE stage => UNLIKELY\n  // LARGE stage and no previous LARGE stages => UNCERTAIN;\n  // LARGE stage and prev LARGE stage => UNLIKELY\n  return function (student, program) {\n    var prevLargeStage = false;\n\n    for (var i = 0; i < stages.length; i++) {\n      // if student matches this stage, determine\n      // how likely the student is to be accepted\n      // based on how large the previous lottery stages were.\n      var stage = stages[i];\n\n      if (stage.filter(student, program)) {\n        if (prevLargeStage) {\n          return SuccessChance.UNLIKELY;\n        } else {\n          if (stage.size === LotteryStageSize.SMALL) {\n            return SuccessChance.LIKELY;\n          } else if (stage.size === LotteryStageSize.LARGE) {\n            return SuccessChance.UNCERTAIN;\n          }\n        }\n      } // if student does not match this stage, record if\n      // this stage was LARGE.\n\n\n      if (stage.size === LotteryStageSize.LARGE) {\n        prevLargeStage = true;\n      }\n    } // if student does not match any stage of lottery, return NONE\n\n\n    return SuccessChance.NONE;\n  };\n};","map":{"version":3,"sources":["/home/michael/code/chavez-hs-planner/src/shared/requirement-functions/requirement-function-builders/lottery.ts"],"names":["SuccessChance","ifInProximity","ifSiblingAttends","everyone","LotteryStageSize","PROXIMITY_LOTTERY_STAGE","filter","size","LARGE","SIBLING_LOTTERY_STAGE","SMALL","GENERAL_LOTTERY_STAGE","TIER_LOTTERY_STAGE","lottery","stages","student","program","prevLargeStage","i","length","stage","UNLIKELY","LIKELY","UNCERTAIN","NONE"],"mappings":"AAOA,SAAQA,aAAR,QAA4B,sCAA5B;AAEA,SACEC,aADF,EAEEC,gBAFF,EAGEC,QAHF,QAIO,WAJP;AAMA,WAAYC,gBAAZ;;WAAYA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;GAAAA,gB,KAAAA,gB;;AAWZ,OAAO,IAAMC,uBAAuB,GAAG;AACrC;AACAC,EAAAA,MAAM,EAAEL,aAF6B;AAGrCM,EAAAA,IAAI,EAAEH,gBAAgB,CAACI;AAHc,CAAhC;AAMP,OAAO,IAAMC,qBAAqB,GAAG;AACnCH,EAAAA,MAAM,EAAEJ,gBAD2B;AAEnCK,EAAAA,IAAI,EAAEH,gBAAgB,CAACM;AAFY,CAA9B;AAKP,OAAO,IAAMC,qBAAqB,GAAG;AACnCL,EAAAA,MAAM,EAAEH,QAD2B;AAEnCI,EAAAA,IAAI,EAAEH,gBAAgB,CAACI;AAFY,CAA9B,C,CAKP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMI,kBAAkB,GAAG;AAChCN,EAAAA,MAAM,EAAEH,QADwB;AAEhCI,EAAAA,IAAI,EAAEH,gBAAgB,CAACI;AAFS,CAA3B;AAKP,OAAO,IAAMK,OAAO,GAAG,SAAVA,OAAU,GAAoD;AAAA,oCAAhDC,MAAgD;AAAhDA,IAAAA,MAAgD;AAAA;;AACzE;AACA;AACA;AACA;AACA;AAEA,SAAO,UAACC,OAAD,EAAuBC,OAAvB,EAA4C;AACjD,QAAIC,cAAc,GAAG,KAArB;;AACA,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACJ,MAAM,CAACK,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAElC;AACA;AACA;AACA,UAAME,KAAK,GAAGN,MAAM,CAACI,CAAD,CAApB;;AACA,UAAIE,KAAK,CAACd,MAAN,CAAaS,OAAb,EAAsBC,OAAtB,CAAJ,EAAoC;AAClC,YAAIC,cAAJ,EAAoB;AAClB,iBAAOjB,aAAa,CAACqB,QAArB;AACD,SAFD,MAEO;AACL,cAAID,KAAK,CAACb,IAAN,KAAeH,gBAAgB,CAACM,KAApC,EAA2C;AACzC,mBAAOV,aAAa,CAACsB,MAArB;AACD,WAFD,MAEO,IAAIF,KAAK,CAACb,IAAN,KAAeH,gBAAgB,CAACI,KAApC,EAA2C;AAChD,mBAAOR,aAAa,CAACuB,SAArB;AACD;AACF;AACF,OAhBiC,CAiBlC;AACA;;;AACA,UAAIH,KAAK,CAACb,IAAN,KAAeH,gBAAgB,CAACI,KAApC,EAA2C;AACzCS,QAAAA,cAAc,GAAG,IAAjB;AACD;AACF,KAxBgD,CA0BjD;;;AACA,WAAOjB,aAAa,CAACwB,IAArB;AACD,GA5BD;AA6BD,CApCM","sourcesContent":["import {\n  StudentData,\n  Program,\n  RequirementFunction,\n  ReqFnFilter,\n} from \"../../../shared/types\";\n\nimport {SuccessChance} from \"../../../shared/enums/success-chance\";\n\nimport {\n  ifInProximity,\n  ifSiblingAttends,\n  everyone,\n} from \"./filters\";\n\nexport enum LotteryStageSize {\n  SMALL,\n  LARGE\n}\n\ninterface LotteryStage {\n  filter: ReqFnFilter\n  size: LotteryStageSize\n}\n\n\nexport const PROXIMITY_LOTTERY_STAGE = {\n  // TODO confirm that this is how this works\n  filter: ifInProximity,\n  size: LotteryStageSize.LARGE\n};\n\nexport const SIBLING_LOTTERY_STAGE = {\n  filter: ifSiblingAttends,\n  size: LotteryStageSize.SMALL\n};\n\nexport const GENERAL_LOTTERY_STAGE = {\n  filter: everyone,\n  size: LotteryStageSize.LARGE\n};\n\n// We're treating tiered lottery stage (where even numbers of applicants are\n// accepted by tier) like general lottery stages (where applicants are \n// accepted purely randomly). Because we don't have any way of saying\n// how likely students are to get in in tiered vs general lotteries,\n// this is OK.\nexport const TIER_LOTTERY_STAGE = {\n  filter: everyone,\n  size: LotteryStageSize.LARGE\n};\n\nexport const lottery = (...stages: LotteryStage[]): RequirementFunction => {\n  // stage logic:\n  // SMALL stage and no previous LARGE stages => LIKELY.\n  // SMALL stage and prev LARGE stage => UNLIKELY\n  // LARGE stage and no previous LARGE stages => UNCERTAIN;\n  // LARGE stage and prev LARGE stage => UNLIKELY\n  \n  return (student: StudentData, program: Program) => {\n    let prevLargeStage = false;\n    for (let i=0; i<stages.length; i++) {\n\n      // if student matches this stage, determine\n      // how likely the student is to be accepted\n      // based on how large the previous lottery stages were.\n      const stage = stages[i];\n      if (stage.filter(student, program)) {\n        if (prevLargeStage) {\n          return SuccessChance.UNLIKELY;\n        } else {\n          if (stage.size === LotteryStageSize.SMALL) {\n            return SuccessChance.LIKELY;\n          } else if (stage.size === LotteryStageSize.LARGE) {\n            return SuccessChance.UNCERTAIN;\n          }\n        }\n      }\n      // if student does not match this stage, record if\n      // this stage was LARGE.\n      if (stage.size === LotteryStageSize.LARGE) {\n        prevLargeStage = true;\n      }\n    }\n\n    // if student does not match any stage of lottery, return NONE\n    return SuccessChance.NONE;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}