{"ast":null,"code":"/* \n * Returns true if there is some programID in a whose value is not the same in a and b.\n * Otherwise, returns false.\n * */\nexport var programOutcomesAreDifferent = function programOutcomesAreDifferent(a, b) {\n  return Object.keys(a).some(function (programID) {\n    var outcomeA = a[programID];\n    var outcomeB = b[programID]; // If both outcomes are undefined, they are the same.\n    // If only one outcome is undefined, they are different.\n    // If both outcomes are not undefined, compare each of their\n    // properties.\n\n    if (outcomeA === undefined && outcomeB === undefined) {\n      return false;\n    } else if (outcomeA === undefined || outcomeB === undefined) {\n      return true;\n    } else {\n      var propertiesDifferent = outcomeA.applicationChance !== outcomeB.applicationChance || outcomeA.selectionChance !== outcomeB.selectionChance || outcomeA.overallChance !== outcomeB.overallChance || outcomeA.distance !== outcomeB.distance;\n\n      if (propertiesDifferent) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/home/michael/code/chavez-hs-planner/src/shared/redux/utils/program-outcomes-are-different.ts"],"names":["programOutcomesAreDifferent","a","b","Object","keys","some","programID","outcomeA","outcomeB","undefined","propertiesDifferent","applicationChance","selectionChance","overallChance","distance"],"mappings":"AAKA;;;;AAIA,OAAO,IAAMA,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACC,CAAD,EAA8BC,CAA9B,EAAuE;AAChH,SAAQC,MAAM,CAACC,IAAP,CAAYH,CAAZ,EAAeI,IAAf,CAAqB,UAAAC,SAAS,EAAI;AACxC,QAAMC,QAAoC,GAAGN,CAAC,CAACK,SAAD,CAA9C;AACA,QAAME,QAAoC,GAAGN,CAAC,CAACI,SAAD,CAA9C,CAFwC,CAGxC;AACA;AACA;AACA;;AACA,QAAIC,QAAQ,KAAKE,SAAb,IAA0BD,QAAQ,KAAKC,SAA3C,EAAsD;AACpD,aAAO,KAAP;AACD,KAFD,MAEO,IAAIF,QAAQ,KAAKE,SAAb,IAA0BD,QAAQ,KAAKC,SAA3C,EAAsD;AAC3D,aAAO,IAAP;AACD,KAFM,MAEA;AAEL,UAAMC,mBAAmB,GAAGH,QAAQ,CAACI,iBAAT,KAA+BH,QAAQ,CAACG,iBAAxC,IAC1BJ,QAAQ,CAACK,eAAT,KAA6BJ,QAAQ,CAACI,eADZ,IAE1BL,QAAQ,CAACM,aAAT,KAA2BL,QAAQ,CAACK,aAFV,IAG1BN,QAAQ,CAACO,QAAT,KAAsBN,QAAQ,CAACM,QAHjC;;AAKA,UAAIJ,mBAAJ,EAAyB;AACvB,eAAO,IAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF;AACF,GAxBO,CAAR;AAyBD,CA1BM","sourcesContent":["import {\n  ProgramOutcome,\n  ProgramOutcomeDictionary\n} from \"../../../shared/types\";\n\n/* \n * Returns true if there is some programID in a whose value is not the same in a and b.\n * Otherwise, returns false.\n * */\nexport const programOutcomesAreDifferent = (a: ProgramOutcomeDictionary, b: ProgramOutcomeDictionary): boolean => {\n  return  Object.keys(a).some( programID => {\n    const outcomeA: ProgramOutcome | undefined = a[programID];\n    const outcomeB: ProgramOutcome | undefined = b[programID];\n    // If both outcomes are undefined, they are the same.\n    // If only one outcome is undefined, they are different.\n    // If both outcomes are not undefined, compare each of their\n    // properties.\n    if (outcomeA === undefined && outcomeB === undefined) {\n      return false;\n    } else if (outcomeA === undefined || outcomeB === undefined) {\n      return true;\n    } else {\n\n      const propertiesDifferent = outcomeA.applicationChance !== outcomeB.applicationChance ||\n        outcomeA.selectionChance !== outcomeB.selectionChance ||\n        outcomeA.overallChance !== outcomeB.overallChance ||\n        outcomeA.distance !== outcomeB.distance;\n\n      if (propertiesDifferent) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  });\n};\n\n\n"]},"metadata":{},"sourceType":"module"}