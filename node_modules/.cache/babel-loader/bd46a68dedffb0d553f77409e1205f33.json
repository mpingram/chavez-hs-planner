{"ast":null,"code":"import { ActionType } from \"../../../shared/enums\";\nimport { HS_PROGRAMS_URL, NON_HS_PROGRAMS_URL, SE_CUTOFF_SCORES_URL, NON_SE_CUTOFF_SCORES_URL, SCHOOL_ATTENDANCE_BOUNDARY_TABLE_URL, TRACT_TIER_TABLE_URL } from \"../../../shared/constants\";\nimport { createHSProgramDictionary, createNonHSProgramDictionary, createProgramGroupDictionary } from \"../utils\";\nimport { updateProgramOutcomes } from \"./update-program-outcomes\";\nimport { requirementFunctions } from \"../../../shared/requirement-functions\";\n\nvar fetchJSONFrom = function fetchJSONFrom(url) {\n  return fetch(url).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      console.error(\"Request for \".concat(url, \" failed with \").concat(res.statusText));\n    }\n  }, function (err) {\n    console.error(err);\n    return null;\n  });\n};\n\nexport var updateHSPrograms = function updateHSPrograms(data) {\n  return {\n    type: ActionType.UpdateHSPrograms,\n    payload: data\n  };\n};\nexport var loadHSPrograms = function loadHSPrograms(requirementFunctions) {\n  return function (dispatch) {\n    return fetchJSONFrom(HS_PROGRAMS_URL).then(function (json) {\n      var programDict = createHSProgramDictionary(json, requirementFunctions);\n      dispatch(updateHSPrograms(programDict));\n    });\n  };\n};\nexport var updateNonHSPrograms = function updateNonHSPrograms(data) {\n  return {\n    type: ActionType.UpdateNonHSPrograms,\n    payload: data\n  };\n};\nexport var loadNonHSPrograms = function loadNonHSPrograms() {\n  return function (dispatch) {\n    return fetchJSONFrom(NON_HS_PROGRAMS_URL).then(function (json) {\n      var programDict = createNonHSProgramDictionary(json);\n      dispatch(updateNonHSPrograms(programDict));\n    });\n  };\n};\nexport var updateSECutoffScores = function updateSECutoffScores(data) {\n  return {\n    type: ActionType.UpdateSECutoffScores,\n    payload: data\n  };\n};\nexport var loadSECutoffScores = function loadSECutoffScores() {\n  return function (dispatch) {\n    return fetchJSONFrom(SE_CUTOFF_SCORES_URL).then(function (json) {\n      dispatch(updateSECutoffScores(json));\n    });\n  };\n};\nexport var updateNonSECutoffScores = function updateNonSECutoffScores(data) {\n  return {\n    type: ActionType.UpdateNonSECutoffScores,\n    payload: data\n  };\n};\nexport var loadNonSECutoffScores = function loadNonSECutoffScores() {\n  return function (dispatch) {\n    return fetchJSONFrom(NON_SE_CUTOFF_SCORES_URL).then(function (json) {\n      dispatch(updateNonSECutoffScores(json));\n    });\n  };\n};\nexport var updateSchoolAttendanceBoundaryTable = function updateSchoolAttendanceBoundaryTable(data) {\n  return {\n    type: ActionType.UpdateSchoolAttendanceBoundaryTable,\n    payload: data\n  };\n};\nexport var loadSchoolAttendanceBoundaryTable = function loadSchoolAttendanceBoundaryTable() {\n  return function (dispatch) {\n    return fetchJSONFrom(SCHOOL_ATTENDANCE_BOUNDARY_TABLE_URL).then(function (json) {\n      dispatch(updateSchoolAttendanceBoundaryTable(json));\n    });\n  };\n};\nexport var updateTractTierTable = function updateTractTierTable(data) {\n  return {\n    type: ActionType.UpdateTractTierTable,\n    payload: data\n  };\n};\nexport var loadTractTierTable = function loadTractTierTable() {\n  return function (dispatch) {\n    return fetchJSONFrom(TRACT_TIER_TABLE_URL).then(function (json) {\n      dispatch(updateTractTierTable(json));\n    });\n  };\n};\nexport var loadingData = function loadingData() {\n  return {\n    type: ActionType.LoadingData\n  };\n};\nexport var dataLoaded = function dataLoaded() {\n  return {\n    type: ActionType.DataLoaded\n  };\n};\nexport var updateProgramGroups = function updateProgramGroups(hsPrograms) {\n  return {\n    type: ActionType.UpdateHSProgramGroups,\n    payload: createProgramGroupDictionary(hsPrograms)\n  };\n};\n\nvar createHSSchools = function createHSSchools(hsPrograms) {\n  var schoolDict = {};\n  Object.keys(hsPrograms).map(function (programID) {\n    var program = hsPrograms[programID];\n    var school = {\n      id: program.schoolID,\n      shortName: program.schoolNameShort,\n      longName: program.schoolNameLong\n    };\n    schoolDict[program.schoolID] = school;\n  });\n  return schoolDict;\n};\n\nexport var updateHSSchools = function updateHSSchools(hsPrograms) {\n  return {\n    type: ActionType.UpdateHSSchools,\n    payload: createHSSchools(hsPrograms)\n  };\n};\n/**\n * loadAllData is a convenience method for loading or re-loading all app data at once.\n *\n * loadAllData dispatches actions for loading every piece \n * of app data, and waits for the actions to complete.\n *\n * If the data loading actions all complete successfully, it then \n * dispatches more actions to update derived data. These are:\n *  1) an action informing the store that all data is loaded,\n *  2) an action to update hsSchoolDictionary based on the new data,\n *  3) an action to update program groups based on the new data\n *  4) an action to update program outcomes based on the new data.\n *\n * If any of the data loading actions fail to complete, \n * ...\n * TODO figure out how we should do error handling.\n * */\n\nexport var loadAllData = function loadAllData()\n/* NOTE can't get the types to work */\n{\n  // dispatch all data loading actions, wrapped\n  // by Promise.all().\n  // TODO error handling?\n  return function (dispatch, getState) {\n    dispatch(loadingData());\n    return Promise.all([dispatch(loadHSPrograms(requirementFunctions)), dispatch(loadNonHSPrograms()), dispatch(loadSECutoffScores()), dispatch(loadNonSECutoffScores()), dispatch(loadSchoolAttendanceBoundaryTable()), dispatch(loadTractTierTable())]).then(function (results) {\n      dispatch(dataLoaded());\n      var state = getState(); // create hs school dictionary\n\n      dispatch(updateHSSchools(state.data.hsPrograms)); // create program groups\n\n      dispatch(updateProgramGroups(state.data.hsPrograms)); // create program outcomes\n\n      dispatch(updateProgramOutcomes(state.studentData, state.data.hsPrograms));\n    });\n  };\n};","map":{"version":3,"sources":["/home/michael/code/chavez-hs-planner/src/shared/redux/actions/data-loading.ts"],"names":["ActionType","HS_PROGRAMS_URL","NON_HS_PROGRAMS_URL","SE_CUTOFF_SCORES_URL","NON_SE_CUTOFF_SCORES_URL","SCHOOL_ATTENDANCE_BOUNDARY_TABLE_URL","TRACT_TIER_TABLE_URL","createHSProgramDictionary","createNonHSProgramDictionary","createProgramGroupDictionary","updateProgramOutcomes","requirementFunctions","fetchJSONFrom","url","fetch","then","res","ok","json","console","error","statusText","err","updateHSPrograms","data","type","UpdateHSPrograms","payload","loadHSPrograms","dispatch","programDict","updateNonHSPrograms","UpdateNonHSPrograms","loadNonHSPrograms","updateSECutoffScores","UpdateSECutoffScores","loadSECutoffScores","updateNonSECutoffScores","UpdateNonSECutoffScores","loadNonSECutoffScores","updateSchoolAttendanceBoundaryTable","UpdateSchoolAttendanceBoundaryTable","loadSchoolAttendanceBoundaryTable","updateTractTierTable","UpdateTractTierTable","loadTractTierTable","loadingData","LoadingData","dataLoaded","DataLoaded","updateProgramGroups","hsPrograms","UpdateHSProgramGroups","createHSSchools","schoolDict","Object","keys","map","programID","program","school","id","schoolID","shortName","schoolNameShort","longName","schoolNameLong","updateHSSchools","UpdateHSSchools","loadAllData","getState","Promise","all","results","state","studentData"],"mappings":"AAOA,SAASA,UAAT,QAA2B,uBAA3B;AAEA,SACEC,eADF,EAEEC,mBAFF,EAGEC,oBAHF,EAIEC,wBAJF,EAKEC,oCALF,EAMEC,oBANF,QAOO,2BAPP;AASA,SACEC,yBADF,EAEEC,4BAFF,EAGEC,4BAHF,QAIO,UAJP;AAMA,SAASC,qBAAT,QAAsC,2BAAtC;AAEA,SAASC,oBAAT,QAAqC,uCAArC;;AAIA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAA+B;AACnD,SAAOC,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CACL,UAAAC,GAAG,EAAI;AACL,QAAIA,GAAG,CAACC,EAAR,EAAY;AACV,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACD,KAFD,MAEO;AACLC,MAAAA,OAAO,CAACC,KAAR,uBAA6BP,GAA7B,0BAAgDG,GAAG,CAACK,UAApD;AACD;AACF,GAPI,EAQL,UAAAC,GAAG,EAAI;AACLH,IAAAA,OAAO,CAACC,KAAR,CAAcE,GAAd;AACA,WAAO,IAAP;AACD,GAXI,CAAP;AAaD,CAdD;;AAgBA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAU;AACxC,SAAO;AACLC,IAAAA,IAAI,EAAEzB,UAAU,CAAC0B,gBADZ;AAELC,IAAAA,OAAO,EAAEH;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,CAACjB,oBAAD,EAAyD;AACrF,SAAO,UAACkB,QAAD,EAAc;AACnB,WAAOjB,aAAa,CAACX,eAAD,CAAb,CAA+Bc,IAA/B,CAAqC,UAAAG,IAAI,EAAI;AAClD,UAAMY,WAA8B,GAAGvB,yBAAyB,CAACW,IAAD,EAAOP,oBAAP,CAAhE;AACAkB,MAAAA,QAAQ,CAAEN,gBAAgB,CAACO,WAAD,CAAlB,CAAR;AACD,KAHM,CAAP;AAID,GALD;AAMD,CAPM;AASP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACP,IAAD,EAAU;AAC3C,SAAO;AACLC,IAAAA,IAAI,EAAEzB,UAAU,CAACgC,mBADZ;AAELL,IAAAA,OAAO,EAAEH;AAFJ,GAAP;AAID,CALM;AAMP,OAAO,IAAMS,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AACrC,SAAO,UAACJ,QAAD,EAAc;AACnB,WAAOjB,aAAa,CAACV,mBAAD,CAAb,CAAmCa,IAAnC,CAAyC,UAAAG,IAAI,EAAI;AACtD,UAAMY,WAA8B,GAAGtB,4BAA4B,CAACU,IAAD,CAAnE;AACAW,MAAAA,QAAQ,CAAEE,mBAAmB,CAACD,WAAD,CAArB,CAAR;AACD,KAHM,CAAP;AAID,GALD;AAMD,CAPM;AASP,OAAO,IAAMI,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACV,IAAD,EAAU;AAC5C,SAAO;AACLC,IAAAA,IAAI,EAAEzB,UAAU,CAACmC,oBADZ;AAELR,IAAAA,OAAO,EAAEH;AAFJ,GAAP;AAID,CALM;AAMP,OAAO,IAAMY,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AACtC,SAAO,UAACP,QAAD,EAAc;AACnB,WAAOjB,aAAa,CAACT,oBAAD,CAAb,CAAoCY,IAApC,CAA0C,UAAAG,IAAI,EAAI;AACvDW,MAAAA,QAAQ,CAAEK,oBAAoB,CAAChB,IAAD,CAAtB,CAAR;AACD,KAFM,CAAP;AAGD,GAJD;AAKD,CANM;AAQP,OAAO,IAAMmB,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACb,IAAD,EAAU;AAC/C,SAAO;AACLC,IAAAA,IAAI,EAAEzB,UAAU,CAACsC,uBADZ;AAELX,IAAAA,OAAO,EAAEH;AAFJ,GAAP;AAID,CALM;AAMP,OAAO,IAAMe,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AACzC,SAAO,UAACV,QAAD,EAAc;AACnB,WAAOjB,aAAa,CAACR,wBAAD,CAAb,CAAwCW,IAAxC,CAA8C,UAAAG,IAAI,EAAI;AAC3DW,MAAAA,QAAQ,CAAEQ,uBAAuB,CAACnB,IAAD,CAAzB,CAAR;AACD,KAFM,CAAP;AAGD,GAJD;AAKD,CANM;AAQP,OAAO,IAAMsB,mCAAmC,GAAG,SAAtCA,mCAAsC,CAAChB,IAAD,EAAU;AAC3D,SAAO;AACLC,IAAAA,IAAI,EAAEzB,UAAU,CAACyC,mCADZ;AAELd,IAAAA,OAAO,EAAEH;AAFJ,GAAP;AAID,CALM;AAMP,OAAO,IAAMkB,iCAAiC,GAAG,SAApCA,iCAAoC,GAAM;AACrD,SAAO,UAACb,QAAD,EAAc;AACnB,WAAOjB,aAAa,CAACP,oCAAD,CAAb,CAAoDU,IAApD,CAA0D,UAAAG,IAAI,EAAI;AACvEW,MAAAA,QAAQ,CAAEW,mCAAmC,CAACtB,IAAD,CAArC,CAAR;AACD,KAFM,CAAP;AAGD,GAJD;AAKD,CANM;AAQP,OAAO,IAAMyB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACnB,IAAD,EAAU;AAC5C,SAAO;AACLC,IAAAA,IAAI,EAAEzB,UAAU,CAAC4C,oBADZ;AAELjB,IAAAA,OAAO,EAAEH;AAFJ,GAAP;AAID,CALM;AAMP,OAAO,IAAMqB,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AACtC,SAAO,UAAChB,QAAD,EAAc;AACnB,WAAOjB,aAAa,CAACN,oBAAD,CAAb,CAAoCS,IAApC,CAA0C,UAAAG,IAAI,EAAI;AACvDW,MAAAA,QAAQ,CAAEc,oBAAoB,CAACzB,IAAD,CAAtB,CAAR;AACD,KAFM,CAAP;AAGD,GAJD;AAKD,CANM;AAQP,OAAO,IAAM4B,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC/B,SAAO;AACLrB,IAAAA,IAAI,EAAEzB,UAAU,CAAC+C;AADZ,GAAP;AAGD,CAJM;AAKP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC9B,SAAO;AACLvB,IAAAA,IAAI,EAAEzB,UAAU,CAACiD;AADZ,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,UAAD,EAAmC;AACpE,SAAO;AACL1B,IAAAA,IAAI,EAAEzB,UAAU,CAACoD,qBADZ;AAELzB,IAAAA,OAAO,EAAElB,4BAA4B,CAAC0C,UAAD;AAFhC,GAAP;AAID,CALM;;AAOP,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACF,UAAD,EAAqD;AAC3E,MAAIG,UAA4B,GAAG,EAAnC;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYL,UAAZ,EAAwBM,GAAxB,CAA6B,UAAAC,SAAS,EAAI;AACxC,QAAMC,OAAO,GAAGR,UAAU,CAACO,SAAD,CAA1B;AACA,QAAME,MAAM,GAAG;AAACC,MAAAA,EAAE,EAAEF,OAAO,CAACG,QAAb;AAAuBC,MAAAA,SAAS,EAAEJ,OAAO,CAACK,eAA1C;AAA2DC,MAAAA,QAAQ,EAAEN,OAAO,CAACO;AAA7E,KAAf;AACAZ,IAAAA,UAAU,CAACK,OAAO,CAACG,QAAT,CAAV,GAA+BF,MAA/B;AACD,GAJD;AAKA,SAAON,UAAP;AACD,CARD;;AAUA,OAAO,IAAMa,eAAe,GAAG,SAAlBA,eAAkB,CAAChB,UAAD,EAAmC;AAChE,SAAO;AACL1B,IAAAA,IAAI,EAAEzB,UAAU,CAACoE,eADZ;AAELzC,IAAAA,OAAO,EAAE0B,eAAe,CAACF,UAAD;AAFnB,GAAP;AAID,CALM;AAOP;;;;;;;;;;;;;;;;;;AAiBA,OAAO,IAAMkB,WAAW,GAAG,SAAdA,WAAc;AAAQ;AAA0C;AAC3E;AACA;AACA;AACA,SAAO,UAACxC,QAAD,EAAuDyC,QAAvD,EAAoF;AACzFzC,IAAAA,QAAQ,CAAEiB,WAAW,EAAb,CAAR;AACA,WAAOyB,OAAO,CAACC,GAAR,CAAY,CACjB3C,QAAQ,CAAED,cAAc,CAACjB,oBAAD,CAAhB,CADS,EAEjBkB,QAAQ,CAAEI,iBAAiB,EAAnB,CAFS,EAGjBJ,QAAQ,CAAEO,kBAAkB,EAApB,CAHS,EAIjBP,QAAQ,CAAEU,qBAAqB,EAAvB,CAJS,EAKjBV,QAAQ,CAAEa,iCAAiC,EAAnC,CALS,EAMjBb,QAAQ,CAAEgB,kBAAkB,EAApB,CANS,CAAZ,EAOJ9B,IAPI,CAOE,UAAA0D,OAAO,EAAI;AAClB5C,MAAAA,QAAQ,CAAEmB,UAAU,EAAZ,CAAR;AACA,UAAM0B,KAAe,GAAGJ,QAAQ,EAAhC,CAFkB,CAGlB;;AACAzC,MAAAA,QAAQ,CACNsC,eAAe,CAACO,KAAK,CAAClD,IAAN,CAAW2B,UAAZ,CADT,CAAR,CAJkB,CAOlB;;AACAtB,MAAAA,QAAQ,CACNqB,mBAAmB,CAACwB,KAAK,CAAClD,IAAN,CAAW2B,UAAZ,CADb,CAAR,CARkB,CAWlB;;AACAtB,MAAAA,QAAQ,CACNnB,qBAAqB,CAACgE,KAAK,CAACC,WAAP,EAAoBD,KAAK,CAAClD,IAAN,CAAW2B,UAA/B,CADf,CAAR;AAGD,KAtBM,CAAP;AAuBD,GAzBD;AA0BD,CA9BM","sourcesContent":["import { \n  AppState,\n  ProgramDictionary,\n  RequirementFunctionDictionary,\n  SchoolDictionary\n} from \"../../../shared/types\";\n\nimport { ActionType } from \"../../../shared/enums\";\n\nimport {\n  HS_PROGRAMS_URL,\n  NON_HS_PROGRAMS_URL,\n  SE_CUTOFF_SCORES_URL,\n  NON_SE_CUTOFF_SCORES_URL,\n  SCHOOL_ATTENDANCE_BOUNDARY_TABLE_URL,\n  TRACT_TIER_TABLE_URL\n} from \"../../../shared/constants\";\n\nimport { \n  createHSProgramDictionary,\n  createNonHSProgramDictionary,\n  createProgramGroupDictionary\n} from \"../utils\"\n\nimport { updateProgramOutcomes } from \"./update-program-outcomes\";\n\nimport { requirementFunctions } from \"../../../shared/requirement-functions\";\nimport { Action } from \"redux\";\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\n\nconst fetchJSONFrom = (url: string): Promise<any> => {\n  return fetch(url).then( \n    res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        console.error(`Request for ${url} failed with ${res.statusText}`);\n      }\n    },\n    err => {\n      console.error(err);\n      return null;\n    }\n  );\n};\n\nexport const updateHSPrograms = (data) => {\n  return {\n    type: ActionType.UpdateHSPrograms,\n    payload: data\n  }\n}\n\nexport const loadHSPrograms = (requirementFunctions: RequirementFunctionDictionary) => {\n  return (dispatch) => {\n    return fetchJSONFrom(HS_PROGRAMS_URL).then( json => {\n      const programDict: ProgramDictionary = createHSProgramDictionary(json, requirementFunctions);\n      dispatch( updateHSPrograms(programDict) );\n    });\n  }\n};\n\nexport const updateNonHSPrograms = (data) => {\n  return {\n    type: ActionType.UpdateNonHSPrograms,\n    payload: data\n  }\n};\nexport const loadNonHSPrograms = () => {\n  return (dispatch) => {\n    return fetchJSONFrom(NON_HS_PROGRAMS_URL).then( json => {\n      const programDict: ProgramDictionary = createNonHSProgramDictionary(json);\n      dispatch( updateNonHSPrograms(programDict) );\n    });\n  }\n};\n\nexport const updateSECutoffScores = (data) => {\n  return {\n    type: ActionType.UpdateSECutoffScores,\n    payload: data\n  }\n};\nexport const loadSECutoffScores = () => {\n  return (dispatch) => {\n    return fetchJSONFrom(SE_CUTOFF_SCORES_URL).then( json => {\n      dispatch( updateSECutoffScores(json) );\n    });\n  }\n};\n\nexport const updateNonSECutoffScores = (data) => {\n  return {\n    type: ActionType.UpdateNonSECutoffScores,\n    payload: data\n  }\n};\nexport const loadNonSECutoffScores = () => {\n  return (dispatch) => {\n    return fetchJSONFrom(NON_SE_CUTOFF_SCORES_URL).then( json => {\n      dispatch( updateNonSECutoffScores(json) );\n    });\n  }\n};\n\nexport const updateSchoolAttendanceBoundaryTable = (data) => {\n  return {\n    type: ActionType.UpdateSchoolAttendanceBoundaryTable,\n    payload: data\n  }\n};\nexport const loadSchoolAttendanceBoundaryTable = () => {\n  return (dispatch) => {\n    return fetchJSONFrom(SCHOOL_ATTENDANCE_BOUNDARY_TABLE_URL).then( json => {\n      dispatch( updateSchoolAttendanceBoundaryTable(json) );\n    });\n  }\n};\n\nexport const updateTractTierTable = (data) => {\n  return {\n    type: ActionType.UpdateTractTierTable,\n    payload: data\n  }\n};\nexport const loadTractTierTable = () => {\n  return (dispatch) => {\n    return fetchJSONFrom(TRACT_TIER_TABLE_URL).then( json => {\n      dispatch( updateTractTierTable(json) );\n    });\n  }\n};\n\nexport const loadingData = () => {\n  return {\n    type: ActionType.LoadingData\n  }\n};\nexport const dataLoaded = () => {\n  return {\n    type: ActionType.DataLoaded\n  }\n};\n\nexport const updateProgramGroups = (hsPrograms: ProgramDictionary) => {\n  return {\n    type: ActionType.UpdateHSProgramGroups,\n    payload: createProgramGroupDictionary(hsPrograms)\n  }\n};\n\nconst createHSSchools = (hsPrograms: ProgramDictionary): SchoolDictionary => {\n  let schoolDict: SchoolDictionary = {};\n  Object.keys(hsPrograms).map( programID => {\n    const program = hsPrograms[programID];\n    const school = {id: program.schoolID, shortName: program.schoolNameShort, longName: program.schoolNameLong};\n    schoolDict[program.schoolID] = school;\n  });\n  return schoolDict;\n};\n\nexport const updateHSSchools = (hsPrograms: ProgramDictionary) => {\n  return {\n    type: ActionType.UpdateHSSchools,\n    payload: createHSSchools(hsPrograms)\n  }\n};\n\n/**\n * loadAllData is a convenience method for loading or re-loading all app data at once.\n *\n * loadAllData dispatches actions for loading every piece \n * of app data, and waits for the actions to complete.\n *\n * If the data loading actions all complete successfully, it then \n * dispatches more actions to update derived data. These are:\n *  1) an action informing the store that all data is loaded,\n *  2) an action to update hsSchoolDictionary based on the new data,\n *  3) an action to update program groups based on the new data\n *  4) an action to update program outcomes based on the new data.\n *\n * If any of the data loading actions fail to complete, \n * ...\n * TODO figure out how we should do error handling.\n * */\nexport const loadAllData = (): any /* NOTE can't get the types to work */ => { \n  // dispatch all data loading actions, wrapped\n  // by Promise.all().\n  // TODO error handling?\n  return (dispatch: ThunkDispatch<AppState, null, Action<any>>, getState: () => AppState) => {\n    dispatch( loadingData() );\n    return Promise.all([\n      dispatch( loadHSPrograms(requirementFunctions) ),\n      dispatch( loadNonHSPrograms() ),\n      dispatch( loadSECutoffScores() ),\n      dispatch( loadNonSECutoffScores() ),\n      dispatch( loadSchoolAttendanceBoundaryTable() ),\n      dispatch( loadTractTierTable() ),\n    ]).then( results => {\n      dispatch( dataLoaded() );\n      const state: AppState = getState();\n      // create hs school dictionary\n      dispatch(\n        updateHSSchools(state.data.hsPrograms)\n      );\n      // create program groups\n      dispatch( \n        updateProgramGroups(state.data.hsPrograms)\n      );\n      // create program outcomes\n      dispatch(\n        updateProgramOutcomes(state.studentData, state.data.hsPrograms)\n      );\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}