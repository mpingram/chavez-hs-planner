{"ast":null,"code":"import { SuccessChance } from \"../../../shared/enums\";\n\nvar sePointCalc = function sePointCalc(student, program) {\n  // if any needed student data is null, return early with null\n  if (student.nweaPercentileMath === null || student.nweaPercentileRead === null || student.subjGradeMath === null || student.subjGradeRead === null || student.subjGradeSci === null || student.subjGradeSocStudies === null || student.seTestPercentile === null) {\n    return null;\n  } // calculate points for NWEA scores\n\n\n  var NWEA_SCORE_CONSTANT = 1.515;\n  var nweaMathPoints = Math.round(student.nweaPercentileMath * NWEA_SCORE_CONSTANT);\n  var nweaReadPoints = Math.round(student.nweaPercentileRead * NWEA_SCORE_CONSTANT); // calculate points for subjGrades\n\n  var gradePointsLookup = {\n    \"A\": 75,\n    \"B\": 50,\n    \"C\": 25,\n    \"D\": 0,\n    \"F\": 0\n  };\n  var subjGradeMathPoints = gradePointsLookup[student.subjGradeMath];\n  var subjGradeReadPoints = gradePointsLookup[student.subjGradeRead];\n  var subjGradeSciPoints = gradePointsLookup[student.subjGradeSci];\n  var subjGradeSocStudiesPoints = gradePointsLookup[student.subjGradeSocStudies]; // calculate score component for SE Test percentile \n\n  var SE_TEST_PERCENTILE_CONSTANT = 3.03;\n  var seTestPoints = Math.round(student.seTestPercentile * SE_TEST_PERCENTILE_CONSTANT);\n  var sePoints = nweaMathPoints + nweaReadPoints + subjGradeMathPoints + subjGradeReadPoints + subjGradeSciPoints + subjGradeSocStudiesPoints + seTestPoints;\n  return sePoints;\n};\n\nvar createSELookup = function createSELookup(getCutoffDict) {\n  return function (student, program) {\n    // TODO: this ignores rank cutoff scores, assuming that if you make it\n    // past your tier cutoff scores you're good. Make double sure that's a\n    // good assumption.\n    var cutoff = getCutoffDict()[program.id];\n\n    if (cutoff === undefined) {\n      throw new Error(\"Failed to find cutoff scores for \".concat(program.programName)); //return null;\n    }\n\n    if (student.tier === null) {\n      return null;\n    }\n\n    switch (student.tier) {\n      case '1':\n        return cutoff.tier1;\n\n      case '2':\n        return cutoff.tier2;\n\n      case '3':\n        return cutoff.tier3;\n\n      case '4':\n        return cutoff.tier4;\n\n      default:\n        return null;\n    }\n  };\n};\n\nexport var createSEPointSystem = function createSEPointSystem(getCutoffDict) {\n  var seLookup = createSELookup(getCutoffDict);\n  return function (student, program) {\n    // if student data is not initialized, return early with NOTIMPLEMENTED\n    if (student.nweaPercentileMath === null || student.nweaPercentileRead === null || student.subjGradeMath === null || student.subjGradeRead === null || student.subjGradeSci === null || student.subjGradeSocStudies === null || student.seTestPercentile === null || student.tier === null) {\n      return SuccessChance.NOTIMPLEMENTED;\n    }\n\n    var points = sePointCalc(student, program);\n    var prevScores = seLookup(student, program);\n\n    if (prevScores === null) {\n      console.error(\"Failed to find cutoff scores for \".concat(program.programName));\n      return SuccessChance.NOTIMPLEMENTED;\n    }\n\n    if (points === null || isNaN(points)) {\n      console.error(\"received NaN for sePointCalc\");\n      return SuccessChance.NOTIMPLEMENTED;\n    }\n\n    if (isNaN(prevScores.min) || isNaN(prevScores.avg) || isNaN(prevScores.max)) {\n      console.error(\"received NaN for seCutoffLookup\");\n      return SuccessChance.NOTIMPLEMENTED;\n    }\n\n    if (points >= prevScores.max) {\n      return SuccessChance.CERTAIN;\n    } else if (points >= prevScores.avg) {\n      return SuccessChance.LIKELY;\n    } else if (points >= prevScores.min) {\n      return SuccessChance.UNCERTAIN;\n    } else {\n      return SuccessChance.NONE;\n    }\n  };\n};","map":{"version":3,"sources":["/home/michael/code/chavez-hs-planner/src/shared/requirement-functions/requirement-function-builders/se-point-system.ts"],"names":["SuccessChance","sePointCalc","student","program","nweaPercentileMath","nweaPercentileRead","subjGradeMath","subjGradeRead","subjGradeSci","subjGradeSocStudies","seTestPercentile","NWEA_SCORE_CONSTANT","nweaMathPoints","Math","round","nweaReadPoints","gradePointsLookup","subjGradeMathPoints","subjGradeReadPoints","subjGradeSciPoints","subjGradeSocStudiesPoints","SE_TEST_PERCENTILE_CONSTANT","seTestPoints","sePoints","createSELookup","getCutoffDict","cutoff","id","undefined","Error","programName","tier","tier1","tier2","tier3","tier4","createSEPointSystem","seLookup","NOTIMPLEMENTED","points","prevScores","console","error","isNaN","min","avg","max","CERTAIN","LIKELY","UNCERTAIN","NONE"],"mappings":"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","sourcesContent":["import {\n  RequirementFunction,\n  StudentData,\n  Program,\n  SECutoffDictionary,\n  CutoffScores\n} from \"../../../shared/types\";\n\nimport { SuccessChance } from \"../../../shared/enums\";\n\nconst sePointCalc = (student: StudentData, program: Program): number | null => {\n\n  // if any needed student data is null, return early with null\n  if (student.nweaPercentileMath === null ||\n    student.nweaPercentileRead === null ||\n    student.subjGradeMath === null ||\n    student.subjGradeRead === null ||\n    student.subjGradeSci === null ||\n    student.subjGradeSocStudies === null ||\n    student.seTestPercentile === null\n  ) {\n\n    return null;\n  }\n\n\n  // calculate points for NWEA scores\n  const NWEA_SCORE_CONSTANT = 1.515;\n  const nweaMathPoints = Math.round(student.nweaPercentileMath * NWEA_SCORE_CONSTANT);\n  const nweaReadPoints = Math.round(student.nweaPercentileRead * NWEA_SCORE_CONSTANT);\n\n  // calculate points for subjGrades\n  const gradePointsLookup = {\n    \"A\": 75,\n    \"B\": 50,\n    \"C\": 25,\n    \"D\": 0,\n    \"F\": 0,\n  }\n  const subjGradeMathPoints = gradePointsLookup[student.subjGradeMath];\n  const subjGradeReadPoints = gradePointsLookup[student.subjGradeRead];\n  const subjGradeSciPoints = gradePointsLookup[student.subjGradeSci];\n  const subjGradeSocStudiesPoints = gradePointsLookup[student.subjGradeSocStudies];\n\n  // calculate score component for SE Test percentile \n  const SE_TEST_PERCENTILE_CONSTANT = 3.03; \n  const seTestPoints = Math.round(student.seTestPercentile * SE_TEST_PERCENTILE_CONSTANT);\n  \n  const sePoints = nweaMathPoints +\n    nweaReadPoints +\n    subjGradeMathPoints +\n    subjGradeReadPoints + \n    subjGradeSciPoints +\n    subjGradeSocStudiesPoints +\n    seTestPoints;\n\n  return sePoints;\n};\n\nconst createSELookup = (getCutoffDict: () => SECutoffDictionary) => (student: StudentData, program: Program): CutoffScores | null  => {\n  // TODO: this ignores rank cutoff scores, assuming that if you make it\n  // past your tier cutoff scores you're good. Make double sure that's a\n  // good assumption.\n  const cutoff = getCutoffDict()[program.id];\n  if (cutoff === undefined) {\n    throw new Error(`Failed to find cutoff scores for ${program.programName}`);\n    //return null;\n  }\n  if (student.tier === null) {\n    return null;\n  }\n\n  switch(student.tier) {\n    case '1':\n      return cutoff.tier1; \n    case '2':\n      return cutoff.tier2;\n    case '3':\n      return cutoff.tier3;\n    case '4':\n      return cutoff.tier4;\n    default:\n      return null;\n  }\n};\n\nexport const createSEPointSystem = (getCutoffDict: () => SECutoffDictionary): RequirementFunction => {\n\n  const seLookup = createSELookup(getCutoffDict);\n\n  return (student, program) => {\n    // if student data is not initialized, return early with NOTIMPLEMENTED\n    if (student.nweaPercentileMath === null ||\n      student.nweaPercentileRead === null ||\n      student.subjGradeMath === null ||\n      student.subjGradeRead === null ||\n      student.subjGradeSci === null ||\n      student.subjGradeSocStudies === null ||\n      student.seTestPercentile === null ||\n      student.tier === null\n    ) {\n      return SuccessChance.NOTIMPLEMENTED;\n    }\n    \n    const points = sePointCalc(student, program);\n    const prevScores= seLookup(student, program);\n    \n    if (prevScores === null) {\n      console.error(`Failed to find cutoff scores for ${program.programName}`);\n      return SuccessChance.NOTIMPLEMENTED;\n    }\n\n    if (points === null || isNaN(points)) {\n      console.error(\"received NaN for sePointCalc\");\n      return SuccessChance.NOTIMPLEMENTED;\n    }\n    if (isNaN(prevScores.min) || isNaN(prevScores.avg) || isNaN(prevScores.max)) {\n      console.error(\"received NaN for seCutoffLookup\");\n      return SuccessChance.NOTIMPLEMENTED;\n    }\n\n    if (points >= prevScores.max) {\n      return SuccessChance.CERTAIN;\n    } else if (points >= prevScores.avg) {\n      return SuccessChance.LIKELY;\n    } else if (points >= prevScores.min) {\n      return SuccessChance.UNCERTAIN; \n    } else {\n      return SuccessChance.NONE;\n    }\n  }\n};\n\n"]},"metadata":{},"sourceType":"module"}