{"ast":null,"code":"import * as JSONP from \"browser-jsonp\";\nimport { store } from \"../../../shared/redux/store\";\n\nvar getTractTierTable = function getTractTierTable() {\n  return store.getState().data.tractTierTable;\n};\n\nexport var GetTierError = {\n  InvalidAddressErr: new Error(\"Invalid address\"),\n  NoTierFoundErr: new Error(\"No CPS tier found for this address\"),\n  RequestFailedErr: new Error(\"Request Failed\")\n};\n;\n/*\n * Takes a Chicago street address (e.g. 4747 S Marshfield Ave) and returns a promise\n * that either returns the address' geolocation and CPS tier, or returns one of the\n * three GetTierErrors defined in this module.\n * */\n\nexport var getTierAndGeo = function getTierAndGeo(streetAddress) {\n  var address = streetAddress.trim() + \" , Chicago IL\";\n  return new Promise(function (resolve, reject) {\n    getTractAndGeo(address).then(function (_ref) {\n      var tract = _ref.tract,\n          geo = _ref.geo;\n      lookupTierFromTract(tract).then(function (tier) {\n        resolve({\n          tier: tier,\n          geo: geo\n        });\n      }).catch(function (err) {\n        return reject(GetTierError.NoTierFoundErr);\n      });\n    }).catch(function (err) {\n      console.error(err);\n      reject(err);\n    });\n  });\n};\n;\n\nvar getTractAndGeo = function getTractAndGeo(address) {\n  var API_BASE_URL = \"https://geocoding.geo.census.gov/geocoder/geographies/onelineaddress\";\n  var apiParams = {\n    address: address,\n    format: \"jsonp\",\n    benchmark: \"Public_AR_Current\",\n    vintage: \"Current_Current\",\n    layers: \"Census Tracts\"\n  };\n\n  var sendRequest = function sendRequest(baseUrl, params) {\n    return new Promise(function (resolve, reject) {\n      JSONP({\n        url: baseUrl,\n        data: params,\n        success: function success(data) {\n          return resolve(data);\n        },\n        error: function error(err) {\n          reject(GetTierError.RequestFailedErr);\n        }\n      });\n    });\n  };\n\n  var extractTract = function extractTract(response) {\n    return response.result.addressMatches[0].geographies[\"Census Tracts\"][0].BASENAME;\n  };\n\n  var extractGeo = function extractGeo(response) {\n    var coords = response.result.addressMatches[0].coordinates;\n    return {\n      latitude: coords.y,\n      longitude: coords.x\n    };\n  };\n\n  return new Promise(function (resolve, reject) {\n    sendRequest(API_BASE_URL, apiParams).then(function (res) {\n      var tract = extractTract(res);\n      var geo = extractGeo(res);\n      resolve({\n        tract: tract,\n        geo: geo\n      });\n    }).catch(function (e) {\n      return reject(e);\n    });\n  });\n};\n\nvar lookupTierFromTract = function lookupTierFromTract(tract) {\n  return new Promise(function (resolve, reject) {\n    var tier = getTractTierTable()[tract];\n\n    if (tier === undefined) {\n      reject(GetTierError.NoTierFoundErr);\n    } else {\n      resolve(tier);\n    }\n  });\n};","map":{"version":3,"sources":["/home/michael/code/chavez-hs-planner/src/shared/redux/utils/get-tier-and-geo.ts"],"names":["JSONP","store","getTractTierTable","getState","data","tractTierTable","GetTierError","InvalidAddressErr","Error","NoTierFoundErr","RequestFailedErr","getTierAndGeo","streetAddress","address","trim","Promise","resolve","reject","getTractAndGeo","then","tract","geo","lookupTierFromTract","tier","catch","err","console","error","API_BASE_URL","apiParams","format","benchmark","vintage","layers","sendRequest","baseUrl","params","url","success","extractTract","response","result","addressMatches","geographies","BASENAME","extractGeo","coords","coordinates","latitude","y","longitude","x","res","e","undefined"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,eAAvB;AAEA,SAASC,KAAT,QAAsB,6BAAtB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,SAAMD,KAAK,CAACE,QAAN,GAAiBC,IAAjB,CAAsBC,cAA5B;AAAA,CAA1B;;AAEA,OAAO,IAAMC,YAAY,GAAG;AAC1BC,EAAAA,iBAAiB,EAAE,IAAIC,KAAJ,CAAU,iBAAV,CADO;AAE1BC,EAAAA,cAAc,EAAE,IAAID,KAAJ,CAAU,oCAAV,CAFU;AAG1BE,EAAAA,gBAAgB,EAAE,IAAIF,KAAJ,CAAU,gBAAV;AAHQ,CAArB;AASN;AAGD;;;;;;AAKA,OAAO,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAACC,aAAD,EAAwD;AAEnF,MAAMC,OAAO,GAAGD,aAAa,CAACE,IAAd,KAAuB,eAAvC;AAEA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,IAAAA,cAAc,CAACL,OAAD,CAAd,CAAwBM,IAAxB,CAA8B,gBAAkB;AAAA,UAAhBC,KAAgB,QAAhBA,KAAgB;AAAA,UAATC,GAAS,QAATA,GAAS;AAC9CC,MAAAA,mBAAmB,CAACF,KAAD,CAAnB,CAA2BD,IAA3B,CAAiC,UAAAI,IAAI,EAAI;AACvCP,QAAAA,OAAO,CAAC;AAACO,UAAAA,IAAI,EAAJA,IAAD;AAAOF,UAAAA,GAAG,EAAHA;AAAP,SAAD,CAAP;AACD,OAFD,EAEGG,KAFH,CAEU,UAAAC,GAAG;AAAA,eAAIR,MAAM,CAACX,YAAY,CAACG,cAAd,CAAV;AAAA,OAFb;AAGD,KAJD,EAIGe,KAJH,CAIU,UAAAC,GAAG,EAAI;AACfC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACAR,MAAAA,MAAM,CAACQ,GAAD,CAAN;AACD,KAPD;AAQD,GATM,CAAP;AAUD,CAdM;AAsBN;;AAkBD,IAAMP,cAAc,GAAG,SAAjBA,cAAiB,CAACL,OAAD,EAA2F;AAChH,MAAMe,YAAY,GAAG,sEAArB;AACA,MAAMC,SAA6B,GAAG;AACpChB,IAAAA,OAAO,EAAEA,OAD2B;AAEpCiB,IAAAA,MAAM,EAAE,OAF4B;AAGpCC,IAAAA,SAAS,EAAE,mBAHyB;AAIpCC,IAAAA,OAAO,EAAE,iBAJ2B;AAKpCC,IAAAA,MAAM,EAAE;AAL4B,GAAtC;;AAUA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,OAAD,EAAkBC,MAAlB,EAAgF;AAClG,WAAO,IAAIrB,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvCjB,MAAAA,KAAK,CAAC;AACJqC,QAAAA,GAAG,EAAEF,OADD;AAEJ/B,QAAAA,IAAI,EAAEgC,MAFF;AAGJE,QAAAA,OAAO,EAAE,iBAAClC,IAAD;AAAA,iBAAgCY,OAAO,CAACZ,IAAD,CAAvC;AAAA,SAHL;AAIJuB,QAAAA,KAAK,EAAE,eAACF,GAAD,EAAS;AACdR,UAAAA,MAAM,CAACX,YAAY,CAACI,gBAAd,CAAN;AACD;AANG,OAAD,CAAL;AAQD,KATM,CAAP;AAUD,GAXD;;AAaA,MAAM6B,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAA4C;AAC/D,WAAOA,QAAQ,CAACC,MAAT,CAAgBC,cAAhB,CAA+B,CAA/B,EAAkCC,WAAlC,CAA8C,eAA9C,EAA+D,CAA/D,EAAkEC,QAAzE;AACD,GAFD;;AAIA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACL,QAAD,EAA2E;AAC5F,QAAMM,MAAM,GAAGN,QAAQ,CAACC,MAAT,CAAgBC,cAAhB,CAA+B,CAA/B,EAAkCK,WAAjD;AACA,WAAO;AAACC,MAAAA,QAAQ,EAAEF,MAAM,CAACG,CAAlB;AAAqBC,MAAAA,SAAS,EAAEJ,MAAM,CAACK;AAAvC,KAAP;AACD,GAHD;;AAKA,SAAO,IAAIpC,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvCiB,IAAAA,WAAW,CAACN,YAAD,EAAeC,SAAf,CAAX,CAAqCV,IAArC,CAA2C,UAAAiC,GAAG,EAAI;AAChD,UAAMhC,KAAK,GAAGmB,YAAY,CAACa,GAAD,CAA1B;AACA,UAAM/B,GAAG,GAAGwB,UAAU,CAACO,GAAD,CAAtB;AACApC,MAAAA,OAAO,CAAC;AAACI,QAAAA,KAAK,EAALA,KAAD;AAAQC,QAAAA,GAAG,EAAHA;AAAR,OAAD,CAAP;AACD,KAJD,EAIGG,KAJH,CAIU,UAAA6B,CAAC;AAAA,aAAIpC,MAAM,CAACoC,CAAD,CAAV;AAAA,KAJX;AAKD,GANM,CAAP;AAOD,CAzCD;;AA2CA,IAAM/B,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACF,KAAD,EAAoC;AAC9D,SAAO,IAAIL,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,QAAMM,IAAY,GAAGrB,iBAAiB,GAAGkB,KAAH,CAAtC;;AACA,QAAIG,IAAI,KAAK+B,SAAb,EAAwB;AACtBrC,MAAAA,MAAM,CAACX,YAAY,CAACG,cAAd,CAAN;AACD,KAFD,MAEO;AACLO,MAAAA,OAAO,CAACO,IAAD,CAAP;AACD;AACJ,GAPM,CAAP;AAQD,CATD","sourcesContent":["import * as JSONP from \"browser-jsonp\";\n\nimport { store } from \"../../../shared/redux/store\";\n\nconst getTractTierTable = () => store.getState().data.tractTierTable;\n\nexport const GetTierError = {\n  InvalidAddressErr: new Error(\"Invalid address\"),\n  NoTierFoundErr: new Error(\"No CPS tier found for this address\"),\n  RequestFailedErr: new Error(\"Request Failed\"),\n};\n\nexport interface TierAndGeoResponse {\n  tier: string\n  geo: {latitude: number, longitude: number}\n};\n\n\n/*\n * Takes a Chicago street address (e.g. 4747 S Marshfield Ave) and returns a promise\n * that either returns the address' geolocation and CPS tier, or returns one of the\n * three GetTierErrors defined in this module.\n * */\nexport const getTierAndGeo = (streetAddress: string): Promise<TierAndGeoResponse> => {\n\n  const address = streetAddress.trim() + \" , Chicago IL\";\n\n  return new Promise((resolve, reject) => {\n    getTractAndGeo(address).then( ({tract, geo}) => {\n      lookupTierFromTract(tract).then( tier => {\n        resolve({tier, geo});\n      }).catch( err => reject(GetTierError.NoTierFoundErr));\n    }).catch( err => {\n      console.error(err);\n      reject(err);\n    });\n  });\n};\n\ninterface GeocodingAPIParams {\n  address: string\n  format: \"json\" | \"csv\" | \"jsonp\"\n  benchmark: string\n  vintage: string\n  layers: string\n};\n\ninterface GeocodingAPIResponse {\n  result: {\n    addressMatches: GeocodingAddressMatch[]\n  }\n}\n\ninterface GeocodingAddressMatch {\n  coordinates: {x: number, y: number}\n  geographies:{\n    \"Census Tracts\": [{\n      TRACT: string,\n      BASENAME: string\n    }]\n  }\n}\n\nconst getTractAndGeo = (address: string): Promise<{tract: string, geo: {latitude: number, longitude: number}}> => {\n  const API_BASE_URL = \"https://geocoding.geo.census.gov/geocoder/geographies/onelineaddress\";\n  const apiParams: GeocodingAPIParams = {\n    address: address,\n    format: \"jsonp\",\n    benchmark: \"Public_AR_Current\",\n    vintage: \"Current_Current\",\n    layers: \"Census Tracts\",\n  };\n\n\n\n  const sendRequest = (baseUrl: string, params: GeocodingAPIParams): Promise<GeocodingAPIResponse> => {\n    return new Promise( (resolve, reject) => {\n      JSONP({\n        url: baseUrl,\n        data: params,\n        success: (data: GeocodingAPIResponse) => resolve(data),\n        error: (err) => {\n          reject(GetTierError.RequestFailedErr)\n        }\n      });\n    });\n  };\n\n  const extractTract = (response: GeocodingAPIResponse): string => {\n    return response.result.addressMatches[0].geographies[\"Census Tracts\"][0].BASENAME;\n  };\n\n  const extractGeo = (response: GeocodingAPIResponse): {latitude: number, longitude: number} => {\n    const coords = response.result.addressMatches[0].coordinates;\n    return {latitude: coords.y, longitude: coords.x};\n  };\n\n  return new Promise( (resolve, reject) => {\n    sendRequest(API_BASE_URL, apiParams).then( res => {\n      const tract = extractTract(res);\n      const geo = extractGeo(res);\n      resolve({tract, geo});\n    }).catch( e => reject(e));\n  });\n};\n\nconst lookupTierFromTract = (tract: string): Promise<string> => {\n  return new Promise( (resolve, reject) => {\n      const tier: string = getTractTierTable()[tract];\n      if (tier === undefined) {\n        reject(GetTierError.NoTierFoundErr);\n      } else {\n        resolve(tier);\n      }\n  });\n};\n\n"]},"metadata":{},"sourceType":"module"}