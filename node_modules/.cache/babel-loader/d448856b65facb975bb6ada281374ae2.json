{"ast":null,"code":"import { createProgramOutcomeDictionary, programOutcomesAreDifferent } from \"../utils\";\nimport { initialState } from \"./initial-state\";\nimport { studentDataReducer } from \"./student-data-reducer\";\nimport { loadingStatusReducer } from \"./loading-status-reducer\";\nimport { dataReducer } from \"./data-reducer\";\nimport { programModalStateReducer } from \"./program-modal-state-reducer\"; //export const rootReducer: Redux.Reducer<AppState> = Redux.combineReducers({\n//  studentData: studentDataReducer,\n//  programOutcomes: programOutcomesReducer,\n//  loadingStatus: loadingStatusReducer,\n//  data: dataReducer\n//});\n\nexport var rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var nextStudentData = studentDataReducer(state.studentData, action);\n  var nextLoadingStatus = loadingStatusReducer(state.loadingStatus, action);\n  var nextData = dataReducer(state.data, action);\n  /* \n   * If student data or data has changed, calculate new program outcomes with new\n   * student data.\n   *\n   * If new program outcomes are the same as the old program outcomes, keep the old\n   * program outcomes.\n   * */\n\n  var studentDataChanged = nextStudentData !== state.studentData;\n  var dataChanged = nextData !== state.data;\n  var nextProgramOutcomes;\n\n  if (studentDataChanged || dataChanged) {\n    var newOutcomes = createProgramOutcomeDictionary(nextStudentData, nextData.hsPrograms);\n\n    if (programOutcomesAreDifferent(newOutcomes, state.programOutcomes)) {\n      nextProgramOutcomes = newOutcomes;\n    } else {\n      nextProgramOutcomes = state.programOutcomes;\n    }\n  } else {\n    nextProgramOutcomes = state.programOutcomes;\n  }\n\n  var nextProgramModalState = programModalStateReducer(state.programModalState, action);\n  return {\n    studentData: nextStudentData,\n    loadingStatus: nextLoadingStatus,\n    data: nextData,\n    programOutcomes: nextProgramOutcomes,\n    programModalState: nextProgramModalState\n  };\n};","map":{"version":3,"sources":["/home/michael/code/chavez-hs-planner/src/shared/redux/reducers/root-reducer.ts"],"names":["createProgramOutcomeDictionary","programOutcomesAreDifferent","initialState","studentDataReducer","loadingStatusReducer","dataReducer","programModalStateReducer","rootReducer","state","action","nextStudentData","studentData","nextLoadingStatus","loadingStatus","nextData","data","studentDataChanged","dataChanged","nextProgramOutcomes","newOutcomes","hsPrograms","programOutcomes","nextProgramModalState","programModalState"],"mappings":"AAOA,SACEA,8BADF,EAEEC,2BAFF,QAGO,UAHP;AAKA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,SAASC,kBAAT,QAAmC,wBAAnC;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,wBAAT,QAAyC,+BAAzC,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,WAAoC,GAAG,SAAvCA,WAAuC,GAA4C;AAAA,MAA3CC,KAA2C,uEAAnCN,YAAmC;AAAA,MAArBO,MAAqB;AAE9F,MAAMC,eAAe,GAAGP,kBAAkB,CAACK,KAAK,CAACG,WAAP,EAAoBF,MAApB,CAA1C;AACA,MAAMG,iBAAiB,GAAGR,oBAAoB,CAACI,KAAK,CAACK,aAAP,EAAsBJ,MAAtB,CAA9C;AACA,MAAMK,QAAQ,GAAGT,WAAW,CAACG,KAAK,CAACO,IAAP,EAAaN,MAAb,CAA5B;AAEA;;;;;;;;AAOA,MAAMO,kBAAkB,GAAGN,eAAe,KAAKF,KAAK,CAACG,WAArD;AACA,MAAMM,WAAW,GAAGH,QAAQ,KAAKN,KAAK,CAACO,IAAvC;AACA,MAAIG,mBAAJ;;AACA,MAAIF,kBAAkB,IAAIC,WAA1B,EAAuC;AACrC,QAAME,WAAW,GAAGnB,8BAA8B,CAACU,eAAD,EAAkBI,QAAQ,CAACM,UAA3B,CAAlD;;AACA,QAAInB,2BAA2B,CAACkB,WAAD,EAAcX,KAAK,CAACa,eAApB,CAA/B,EAAqE;AACnEH,MAAAA,mBAAmB,GAAGC,WAAtB;AACD,KAFD,MAEO;AACLD,MAAAA,mBAAmB,GAAGV,KAAK,CAACa,eAA5B;AACD;AACF,GAPD,MAOO;AACLH,IAAAA,mBAAmB,GAAGV,KAAK,CAACa,eAA5B;AACD;;AAED,MAAMC,qBAAqB,GAAGhB,wBAAwB,CAACE,KAAK,CAACe,iBAAP,EAA0Bd,MAA1B,CAAtD;AAEA,SAAO;AACLE,IAAAA,WAAW,EAAED,eADR;AAELG,IAAAA,aAAa,EAAED,iBAFV;AAGLG,IAAAA,IAAI,EAAED,QAHD;AAILO,IAAAA,eAAe,EAAEH,mBAJZ;AAKLK,IAAAA,iBAAiB,EAAED;AALd,GAAP;AAOD,CApCM","sourcesContent":["import * as Redux from \"redux\";\n\nimport { \n  AppState,\n  ProgramOutcomeDictionary\n} from \"../../../shared/types\";\n\nimport { \n  createProgramOutcomeDictionary,\n  programOutcomesAreDifferent\n} from \"../utils\";\n\nimport { initialState } from \"./initial-state\";\n\nimport { studentDataReducer } from \"./student-data-reducer\";\nimport { loadingStatusReducer } from \"./loading-status-reducer\";\nimport { dataReducer } from \"./data-reducer\";\nimport { programModalStateReducer } from \"./program-modal-state-reducer\";\n\n//export const rootReducer: Redux.Reducer<AppState> = Redux.combineReducers({\n//  studentData: studentDataReducer,\n//  programOutcomes: programOutcomesReducer,\n//  loadingStatus: loadingStatusReducer,\n//  data: dataReducer\n//});\n\nexport const rootReducer: Redux.Reducer<AppState> = (state = initialState, action): AppState => {\n\n  const nextStudentData = studentDataReducer(state.studentData, action);\n  const nextLoadingStatus = loadingStatusReducer(state.loadingStatus, action);\n  const nextData = dataReducer(state.data, action);\n\n  /* \n   * If student data or data has changed, calculate new program outcomes with new\n   * student data.\n   *\n   * If new program outcomes are the same as the old program outcomes, keep the old\n   * program outcomes.\n   * */\n  const studentDataChanged = nextStudentData !== state.studentData;\n  const dataChanged = nextData !== state.data;\n  let nextProgramOutcomes: ProgramOutcomeDictionary;\n  if (studentDataChanged || dataChanged) {\n    const newOutcomes = createProgramOutcomeDictionary(nextStudentData, nextData.hsPrograms);\n    if (programOutcomesAreDifferent(newOutcomes, state.programOutcomes)) {\n      nextProgramOutcomes = newOutcomes;\n    } else {\n      nextProgramOutcomes = state.programOutcomes;\n    }\n  } else {\n    nextProgramOutcomes = state.programOutcomes;\n  }\n\n  const nextProgramModalState = programModalStateReducer(state.programModalState, action)\n\n  return {\n    studentData: nextStudentData,\n    loadingStatus: nextLoadingStatus,\n    data: nextData,\n    programOutcomes: nextProgramOutcomes,\n    programModalState: nextProgramModalState\n  };\n};\n\n"]},"metadata":{},"sourceType":"module"}