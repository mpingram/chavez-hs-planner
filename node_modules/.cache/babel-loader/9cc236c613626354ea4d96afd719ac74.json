{"ast":null,"code":"/*\n * Creates a dictionary mapping school IDs to school names.\n * \n * The relationship between schools and programs is that one school\n * has many programs. This function reads the list of all programs and\n * extracts the unique school names and ids from them.\n * */\nexport var createHSSchoolDict = function createHSSchoolDict(hsProgramDict) {\n  var hsSchoolDict = {};\n  Object.keys(hsProgramDict).forEach(function (programID) {\n    var program = hsProgramDict[programID]; // Many programs share the same schoolID and schoolName properties.\n    // Only add the schoolID/schoolName to hsSchoolDict if we have not\n    // already encountered this schoolID as we iterate through programs.\n\n    if (hsSchoolDict[program.schoolID] === undefined) {\n      hsSchoolDict[program.schoolID] = {\n        id: program.schoolID,\n        longName: program.schoolNameLong,\n        shortName: program.schoolNameShort\n      };\n    }\n  });\n  return hsSchoolDict;\n};","map":{"version":3,"sources":["/home/michael/code/chavez-hs-planner/src/shared/redux/utils/create-hs-school-dictionary.ts"],"names":["createHSSchoolDict","hsProgramDict","hsSchoolDict","Object","keys","forEach","programID","program","schoolID","undefined","id","longName","schoolNameLong","shortName","schoolNameShort"],"mappings":"AAKA;;;;;;;AAOA,OAAO,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,aAAD,EAAwD;AACxF,MAAIC,YAA8B,GAAG,EAArC;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,aAAZ,EAA2BI,OAA3B,CAAoC,UAAAC,SAAS,EAAI;AAC/C,QAAMC,OAAO,GAAGN,aAAa,CAACK,SAAD,CAA7B,CAD+C,CAE/C;AACA;AACA;;AACA,QAAIJ,YAAY,CAACK,OAAO,CAACC,QAAT,CAAZ,KAAmCC,SAAvC,EAAkD;AAChDP,MAAAA,YAAY,CAACK,OAAO,CAACC,QAAT,CAAZ,GAAiC;AAC/BE,QAAAA,EAAE,EAAEH,OAAO,CAACC,QADmB;AAE/BG,QAAAA,QAAQ,EAAEJ,OAAO,CAACK,cAFa;AAG/BC,QAAAA,SAAS,EAAEN,OAAO,CAACO;AAHY,OAAjC;AAKD;AACF,GAZD;AAaA,SAAOZ,YAAP;AACD,CAhBM","sourcesContent":["import {\n  ProgramDictionary,\n  SchoolDictionary\n} from \"../../../shared/types\";\n\n/*\n * Creates a dictionary mapping school IDs to school names.\n * \n * The relationship between schools and programs is that one school\n * has many programs. This function reads the list of all programs and\n * extracts the unique school names and ids from them.\n * */\nexport const createHSSchoolDict = (hsProgramDict: ProgramDictionary): SchoolDictionary => {\n  let hsSchoolDict: SchoolDictionary = {};\n  Object.keys(hsProgramDict).forEach( programID => {\n    const program = hsProgramDict[programID];\n    // Many programs share the same schoolID and schoolName properties.\n    // Only add the schoolID/schoolName to hsSchoolDict if we have not\n    // already encountered this schoolID as we iterate through programs.\n    if (hsSchoolDict[program.schoolID] === undefined) {\n      hsSchoolDict[program.schoolID] = {\n        id: program.schoolID,\n        longName: program.schoolNameLong,\n        shortName: program.schoolNameShort\n      }\n    }\n  });\n  return hsSchoolDict;\n};\n"]},"metadata":{},"sourceType":"module"}