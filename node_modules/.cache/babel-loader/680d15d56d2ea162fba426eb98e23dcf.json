{"ast":null,"code":"import _classCallCheck from \"/home/michael/code/chavez-hs-planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/michael/code/chavez-hs-planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/michael/code/chavez-hs-planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/michael/code/chavez-hs-planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/michael/code/chavez-hs-planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/michael/code/chavez-hs-planner/src/path-to-hs/components/hs-display/hs-program-list.tsx\";\nimport * as React from \"react\";\nimport { SuccessChance } from \"../../../shared/enums\";\nimport { SearchBar } from \"./search-bar\";\nimport HSProgramElement from \"./hs-program-element\";\nimport { AdditionalRequirementForm } from \"./additional-requirement-form\";\nimport SuccessChanceFilter from \"./success-chance-filter\";\nimport HSGroup from \"./hs-group\";\nimport \"./hs-program-list.scss\";\n/* \n * FIXME hardcoded additional requirement field and data; move elsewhere\n * ------------------------------------------------\n * */\n\nimport { connect } from \"react-redux\";\nimport { updateStudentSETestPercentile } from \"../../../shared/redux/actions\";\n\nvar SETestPercentileField = function SETestPercentileField(props) {\n  return React.createElement(\"div\", {\n    className: \"field fixed-width-med\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Selective Enrollment Test Percentile\"), React.createElement(\"input\", {\n    className: \"input\",\n    type: \"number\",\n    value: props.value ? props.value : \"\",\n    onChange: function onChange(ev) {\n      return props.onChange(ev.currentTarget.valueAsNumber);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    value: state.studentData.seTestPercentile\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onChange: function onChange(value) {\n      return dispatch(updateStudentSETestPercentile(value));\n    }\n  };\n};\n\nvar SETestPercentileFieldContainer = connect(mapStateToProps, mapDispatchToProps)(SETestPercentileField);\nvar additionalRequirements = [{\n  id: \"Selective Enrollment Test\",\n  field: React.createElement(SETestPercentileFieldContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }),\n  helpText: React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"What's this?\"), \" After you apply to a Selective Enrollment school, you need to take a Selective Enrollment test. Your Selective Enrollment test percentile is used along with your grades to calculate a Selective Enrollment score from 1-900. Your Selective Enrollment score decides whether or not your get accepted to a Selective Enrollment School.\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"If you haven't taken the Selective Enrollment test yet,\"), \" use this to set a target score for yourself.\")),\n  programIDs: [\"609726-Selective Enrollment High School\", \"609755-Selective Enrollment High School\", \"609749-Selective Enrollment High School\", \"610547-Selective Enrollment High School\", \"609693-Selective Enrollment High School\", \"609720-Selective Enrollment High School\", \"609694-Selective Enrollment High School\", \"610391-Selective Enrollment High School\", \"609751-Selective Enrollment High School\", \"609680-Selective Enrollment High School\", \"609678-Selective Enrollment High School\"]\n}];\n/* \n * END FIXME\n * ---------------------\n * */\n\nvar HSProgramList =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(HSProgramList, _React$PureComponent);\n\n  function HSProgramList(props) {\n    var _this;\n\n    _classCallCheck(this, HSProgramList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HSProgramList).call(this, props));\n\n    _this.sortByOutcome = function (a, b) {\n      var aOutcome = _this.props.outcomes[a.id];\n      var bOutcome = _this.props.outcomes[b.id];\n\n      function toNumber(outcome) {\n        if (outcome === undefined) {\n          return -1;\n        }\n\n        switch (outcome.overallChance) {\n          case SuccessChance.CERTAIN:\n            return 6;\n\n          case SuccessChance.LIKELY:\n            return 5;\n\n          case SuccessChance.UNCERTAIN:\n            return 4;\n\n          case SuccessChance.UNLIKELY:\n            return 3;\n\n          case SuccessChance.NONE:\n            return 2;\n\n          case SuccessChance.NOTIMPLEMENTED:\n            return 1;\n\n          default:\n            return -1;\n        }\n      }\n\n      return toNumber(bOutcome) - toNumber(aOutcome);\n    };\n\n    _this.getOutcomeCounts = function (programs, outcomes) {\n      var counts = {\n        certain: 0,\n        likely: 0,\n        uncertain: 0,\n        unlikely: 0,\n        none: 0,\n        notImplemented: 0\n      };\n      programs.forEach(function (program) {\n        var outcome = outcomes[program.id];\n\n        if (outcome === undefined) {\n          counts.notImplemented += 1;\n        } else {\n          switch (outcome.overallChance) {\n            case SuccessChance.CERTAIN:\n              counts.certain += 1;\n              break;\n\n            case SuccessChance.LIKELY:\n              counts.likely += 1;\n              break;\n\n            case SuccessChance.UNCERTAIN:\n              counts.uncertain += 1;\n              break;\n\n            case SuccessChance.UNLIKELY:\n              counts.unlikely += 1;\n              break;\n\n            case SuccessChance.NONE:\n              counts.none += 1;\n              break;\n\n            case SuccessChance.NOTIMPLEMENTED:\n              counts.notImplemented += 1;\n              break;\n\n            default:\n              console.warn(\"Unrecognized SuccessChance for program \" + program.id);\n              break;\n          }\n        }\n      });\n      return counts;\n    };\n\n    _this.filterBySearchTerm = function (programs, searchTerm) {\n      // if search term is empty, return early.\n      if (searchTerm.trim() === \"\") {\n        return programs;\n      }\n\n      var term = searchTerm.trim().toLowerCase();\n\n      var hasTerm = function hasTerm(text) {\n        return text.toLowerCase().indexOf(term) != -1;\n      };\n\n      return programs.filter(function (program) {\n        return hasTerm(program.programName) || hasTerm(program.schoolNameLong);\n      });\n    };\n\n    _this.filterBySuccessChance = function (programs, outcomes, successChance) {\n      return programs.filter(function (program) {\n        var outcome = outcomes[program.id];\n\n        if (outcome === undefined) {\n          console.warn(\"Missing outcome for program \".concat(program.programName));\n          return true;\n        }\n\n        return successChance === outcome.overallChance;\n      });\n    };\n\n    _this.handleSearchSubmit = function (newSearchTerm) {\n      /* if search term was not cleared, unset any selected success chance filters */\n      if (newSearchTerm !== null) {\n        _this.setState({\n          searchTerm: newSearchTerm,\n          selectedSuccessChance: null\n        });\n      } else {\n        _this.setState({\n          searchTerm: null\n        });\n      }\n    };\n\n    _this.state = {\n      searchTerm: null,\n      selectedSuccessChance: null\n    };\n    return _this;\n  }\n\n  _createClass(HSProgramList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"hs-program-list-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"hs-program-list-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(SuccessChanceFilter, {\n        selectedSuccessChance: this.state.selectedSuccessChance,\n        onSelectedSuccessChanceChange: function onSelectedSuccessChanceChange(succChance) {\n          return _this2.setState({\n            selectedSuccessChance: succChance\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), React.createElement(SearchBar, {\n        placeholder: \"Search for schools or programs...\",\n        defaultValue: this.state.searchTerm ? this.state.searchTerm : \"\",\n        onSearchSubmit: this.handleSearchSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"hs-program-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      },\n      /* \n       * Iterate through the hsProgramGroups passed in through props.\n       * For each program group, render a HSGroup component containing the programs\n       * with the ids specified in the program group.\n       * */\n      this.props.programGroups.map(function (group) {\n        // get this group's programs by looking up programIDs.\n        var programs = group.programIDs.map(function (programID) {\n          return _this2.props.programs[programID];\n        }); // filter the programs by the current search term and by the current filters on SuccessChance.\n\n        var filteredPrograms = programs;\n\n        if (_this2.state.searchTerm !== null) {\n          filteredPrograms = _this2.filterBySearchTerm(filteredPrograms, _this2.state.searchTerm);\n        }\n\n        if (_this2.state.selectedSuccessChance !== null) {\n          filteredPrograms = _this2.filterBySuccessChance(filteredPrograms, _this2.props.outcomes, _this2.state.selectedSuccessChance);\n        }\n\n        var sortedPrograms = filteredPrograms.sort(_this2.sortByOutcome);\n        var programsWithAddlRequirements = [];\n        var programsWithoutAddlRequirements = [];\n        sortedPrograms.forEach(function (program) {\n          var programHasAdditionalRequirement = additionalRequirements.some(function (addlReq) {\n            if (addlReq.programIDs.some(function (id) {\n              return id === program.id;\n            })) {\n              return true;\n            } else {\n              return false;\n            }\n          });\n\n          if (programHasAdditionalRequirement) {\n            programsWithAddlRequirements.push(program);\n          } else {\n            programsWithoutAddlRequirements.push(program);\n          }\n        });\n\n        var outcomeCounts = _this2.getOutcomeCounts(filteredPrograms, _this2.props.outcomes);\n\n        if (filteredPrograms.length > 0) {\n          return React.createElement(HSGroup, {\n            key: group.id,\n            title: group.name,\n            outcomeCounts: outcomeCounts,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172\n            },\n            __self: this\n          }, programsWithAddlRequirements.length > 0 && additionalRequirements.map(function (addlReq) {\n            return React.createElement(AdditionalRequirementForm, {\n              key: addlReq.id,\n              field: addlReq.field,\n              helpText: addlReq.helpText,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 181\n              },\n              __self: this\n            }, programsWithAddlRequirements.map(function (program) {\n              if (addlReq.programIDs.some(function (id) {\n                return id === program.id;\n              })) {\n                return React.createElement(HSProgramElement, {\n                  key: program.id,\n                  program: program,\n                  outcome: _this2.props.outcomes[program.id],\n                  onSelect: _this2.props.onSelectedProgramChange,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 189\n                  },\n                  __self: this\n                });\n              }\n            }));\n          }), programsWithoutAddlRequirements.map(function (program) {\n            return React.createElement(HSProgramElement, {\n              key: program.id,\n              program: program,\n              outcome: _this2.props.outcomes[program.id],\n              onSelect: _this2.props.onSelectedProgramChange,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 204\n              },\n              __self: this\n            });\n          }));\n        }\n      })));\n    }\n  }]);\n\n  return HSProgramList;\n}(React.PureComponent);\n\n;\nexport default HSProgramList;","map":{"version":3,"sources":["/home/michael/code/chavez-hs-planner/src/path-to-hs/components/hs-display/hs-program-list.tsx"],"names":["React","SuccessChance","SearchBar","HSProgramElement","AdditionalRequirementForm","SuccessChanceFilter","HSGroup","connect","updateStudentSETestPercentile","SETestPercentileField","props","value","ev","onChange","currentTarget","valueAsNumber","mapStateToProps","state","studentData","seTestPercentile","mapDispatchToProps","dispatch","SETestPercentileFieldContainer","additionalRequirements","id","field","helpText","programIDs","HSProgramList","sortByOutcome","a","b","aOutcome","outcomes","bOutcome","toNumber","outcome","undefined","overallChance","CERTAIN","LIKELY","UNCERTAIN","UNLIKELY","NONE","NOTIMPLEMENTED","getOutcomeCounts","programs","counts","certain","likely","uncertain","unlikely","none","notImplemented","forEach","program","console","warn","filterBySearchTerm","searchTerm","trim","term","toLowerCase","hasTerm","text","indexOf","filter","programName","schoolNameLong","filterBySuccessChance","successChance","handleSearchSubmit","newSearchTerm","setState","selectedSuccessChance","succChance","programGroups","map","group","programID","filteredPrograms","sortedPrograms","sort","programsWithAddlRequirements","programsWithoutAddlRequirements","programHasAdditionalRequirement","some","addlReq","push","outcomeCounts","length","name","onSelectedProgramChange","PureComponent"],"mappings":"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","sourcesContent":["import * as React from \"react\";\n\nimport {\n  AppState,\n  Program,\n  ProgramOutcome,\n  ProgramDictionary,\n  ProgramGroup,\n  ProgramOutcomeDictionary,\n  OutcomeCounts\n} from \"../../../shared/types\";\nimport { SuccessChance } from \"../../../shared/enums\";\n\nimport { SearchBar } from \"./search-bar\";\nimport HSProgramElement from \"./hs-program-element\";\nimport { AdditionalRequirementForm } from \"./additional-requirement-form\";\n\nimport SuccessChanceFilter from \"./success-chance-filter\";\nimport HSGroup from \"./hs-group\";\n\ninterface HSProgramListProps {\n  programs: ProgramDictionary\n  programGroups: ProgramGroup[]\n  outcomes: ProgramOutcomeDictionary\n  onSelectedProgramChange: (program: Program, outcome: ProgramOutcome | undefined) => any\n}\n\ninterface HSProgramListState {\n  searchTerm: string | null;\n  selectedSuccessChance: SuccessChance | null\n}\n\nimport \"./hs-program-list.scss\";\n\n/* \n * FIXME hardcoded additional requirement field and data; move elsewhere\n * ------------------------------------------------\n * */\nimport { connect } from \"react-redux\";\nimport { updateStudentSETestPercentile } from \"../../../shared/redux/actions\";\ninterface SETEstPercentileFieldProps {\n  value: number | null\n  onChange: (value: number) => any\n}\nconst SETestPercentileField: React.SFC<SETEstPercentileFieldProps> = props => {\n  return (\n    <div className=\"field fixed-width-med\">\n      <label className=\"label\">Selective Enrollment Test Percentile</label>\n      <input \n        className=\"input\" \n        type=\"number\" \n        value={props.value ? props.value : \"\"} \n        onChange={ ev => props.onChange(ev.currentTarget.valueAsNumber) } \n      />\n    </div>\n  )\n};\nconst mapStateToProps = (state: AppState) => {\n  return {\n    value: state.studentData.seTestPercentile\n  }\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onChange: value => dispatch(updateStudentSETestPercentile(value)) \n  };\n};\nconst SETestPercentileFieldContainer = connect(mapStateToProps, mapDispatchToProps)(SETestPercentileField);\n\nconst additionalRequirements = [\n  {\n    id: \"Selective Enrollment Test\",\n    field: <SETestPercentileFieldContainer />,\n    helpText: \n    <div>\n      <p><b>What's this?</b> After you apply to a Selective Enrollment school, you need to take a Selective Enrollment test. Your Selective Enrollment test percentile is used along with your grades to calculate a Selective Enrollment score from 1-900. Your Selective Enrollment score decides whether or not your get accepted to a Selective Enrollment School.</p>\n      <p><b>If you haven't taken the Selective Enrollment test yet,</b> use this to set a target score for yourself.</p>\n    </div>,\n    programIDs: [\n      \"609726-Selective Enrollment High School\", \n      \"609755-Selective Enrollment High School\", \n      \"609749-Selective Enrollment High School\",\n      \"610547-Selective Enrollment High School\",\n      \"609693-Selective Enrollment High School\",\n      \"609720-Selective Enrollment High School\",\n      \"609694-Selective Enrollment High School\",\n      \"610391-Selective Enrollment High School\",\n      \"609751-Selective Enrollment High School\",\n      \"609680-Selective Enrollment High School\",\n      \"609678-Selective Enrollment High School\",\n    ]\n  }\n];\n/* \n * END FIXME\n * ---------------------\n * */\n\nclass HSProgramList extends React.PureComponent<HSProgramListProps, HSProgramListState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchTerm: null,\n      selectedSuccessChance: null\n    };\n  }\n\n\n  render() {\n    return (\n      <div\n        className=\"hs-program-list-container\"\n      >\n        <div className=\"hs-program-list-header\">\n          <SuccessChanceFilter\n            selectedSuccessChance={this.state.selectedSuccessChance}\n            onSelectedSuccessChanceChange={ succChance => this.setState({selectedSuccessChance: succChance}) }\n          />\n\n          <SearchBar \n            placeholder=\"Search for schools or programs...\"\n            defaultValue={this.state.searchTerm ? this.state.searchTerm : \"\"}\n            onSearchSubmit={this.handleSearchSubmit}\n          />\n        </div>\n\n        <div className=\"hs-program-list\">\n          {\n          /* \n           * Iterate through the hsProgramGroups passed in through props.\n           * For each program group, render a HSGroup component containing the programs\n           * with the ids specified in the program group.\n           * */\n          this.props.programGroups.map( group => {\n            // get this group's programs by looking up programIDs.\n            const programs: Program[] = group.programIDs.map( programID => this.props.programs[programID] );\n            // filter the programs by the current search term and by the current filters on SuccessChance.\n            let filteredPrograms = programs;\n            if (this.state.searchTerm !== null) {\n              filteredPrograms = this.filterBySearchTerm(filteredPrograms, this.state.searchTerm);\n            }\n            if (this.state.selectedSuccessChance !== null) {\n              filteredPrograms = this.filterBySuccessChance(filteredPrograms, this.props.outcomes, this.state.selectedSuccessChance);\n            }\n\n            const sortedPrograms = filteredPrograms.sort(this.sortByOutcome);\n\n            let programsWithAddlRequirements: Program[] = []; \n            let programsWithoutAddlRequirements: Program[] = [];\n            \n            sortedPrograms.forEach( program => {\n              const programHasAdditionalRequirement = additionalRequirements.some( addlReq => {\n                if ( addlReq.programIDs.some( id => id === program.id )) {\n                  return true;\n                } else {\n                  return false;\n                }\n              });\n\n              if (programHasAdditionalRequirement) {\n                programsWithAddlRequirements.push(program);\n              } else {\n                programsWithoutAddlRequirements.push(program);\n              }\n            });\n\n            const outcomeCounts = this.getOutcomeCounts(filteredPrograms, this.props.outcomes);\n\n            if (filteredPrograms.length > 0) {\n              return (\n                <HSGroup\n                  key={group.id}\n                  title={group.name}\n                  outcomeCounts={outcomeCounts}\n                >\n                {/* First check to see if any programs have additional requirements. If they do,\n                  display the programs wrapped in an AdditionalRequirementsForm. */}\n                { programsWithAddlRequirements.length > 0 && \n                  additionalRequirements.map( addlReq => {\n                  return <AdditionalRequirementForm\n                    key={addlReq.id}\n                    field={addlReq.field}\n                    helpText={addlReq.helpText}\n                  >\n                    {programsWithAddlRequirements.map( program => {\n                      if (addlReq.programIDs.some( id => id === program.id )) {\n                        return (\n                          <HSProgramElement\n                            key={program.id}\n                            program={program}\n                            outcome={this.props.outcomes[program.id]}\n                            onSelect={this.props.onSelectedProgramChange}\n                          />\n                        )\n                      }\n                    })}\n                  </AdditionalRequirementForm>\n                }) } \n\n                {/* Display all of the remaining programs that do not have additional requirements. */}\n                {programsWithoutAddlRequirements.map( program => {\n                  return (\n                    <HSProgramElement\n                      key={program.id}\n                      program={program}\n                      outcome={this.props.outcomes[program.id]}\n                      onSelect={this.props.onSelectedProgramChange}\n                    />\n                  );\n                })}\n                </HSGroup>\n              )\n            }\n          })}\n        </div>\n      </div>\n    );\n  }\n\n  private sortByOutcome = (a: Program, b: Program): number => {\n    const aOutcome = this.props.outcomes[a.id]\n    const bOutcome = this.props.outcomes[b.id]\n\n    function toNumber(outcome: ProgramOutcome | undefined): number {\n      if (outcome === undefined) {\n        return -1;\n      }\n      switch(outcome.overallChance) {\n          case SuccessChance.CERTAIN: return 6;\n          case SuccessChance.LIKELY: return 5;\n          case SuccessChance.UNCERTAIN: return 4;\n          case SuccessChance.UNLIKELY: return 3;\n          case SuccessChance.NONE: return 2;\n          case SuccessChance.NOTIMPLEMENTED: return 1;\n          default: return -1;\n      }\n    }\n    return toNumber(bOutcome) - toNumber(aOutcome);\n  }\n\n  private getOutcomeCounts = (programs: Program[], outcomes: ProgramOutcomeDictionary): OutcomeCounts => {\n    let counts: OutcomeCounts = {\n      certain: 0,\n      likely: 0,\n      uncertain: 0,\n      unlikely: 0,\n      none: 0,\n      notImplemented: 0\n    };\n    programs.forEach( program => {\n      const outcome = outcomes[program.id];\n      if (outcome === undefined) {\n        counts.notImplemented += 1;\n      } else {\n        switch(outcome.overallChance){\n          case SuccessChance.CERTAIN:\n            counts.certain += 1;\n            break;\n          case SuccessChance.LIKELY:\n            counts.likely += 1;\n            break;\n          case SuccessChance.UNCERTAIN:\n            counts.uncertain += 1;\n            break;\n          case SuccessChance.UNLIKELY:\n            counts.unlikely += 1;\n            break;\n          case SuccessChance.NONE:\n            counts.none += 1;\n            break;\n          case SuccessChance.NOTIMPLEMENTED:\n            counts.notImplemented += 1;\n            break;\n          default:\n            console.warn(\"Unrecognized SuccessChance for program \" + program.id);\n            break;\n        }\n      }\n    });\n    return counts;\n  }\n\n  private filterBySearchTerm = (programs: Program[], searchTerm: string): Program[] => {\n    // if search term is empty, return early.\n    if (searchTerm.trim() === \"\") {\n      return programs;\n    }\n\n    const term = searchTerm.trim().toLowerCase();\n    const hasTerm = (text: string) => {\n      return text.toLowerCase().indexOf(term) != -1;\n    };\n\n    return programs.filter( program => {\n      return hasTerm(program.programName) || hasTerm(program.schoolNameLong);\n    });\n  }\n\n  /** \n   * Keep only the programs whose current outcome's overall chance matches the successChance passed as the third argument.\n   * */\n  private filterBySuccessChance = (programs: Program[], outcomes: ProgramOutcomeDictionary, successChance: SuccessChance): Program[] => {\n    return programs.filter( program => {\n      const outcome = outcomes[program.id];\n      if (outcome === undefined) {\n        console.warn(`Missing outcome for program ${program.programName}`);\n        return true;\n      }\n      return successChance === outcome.overallChance;\n    });\n  }\n\n  private handleSearchSubmit = (newSearchTerm: string | null) => {\n    /* if search term was not cleared, unset any selected success chance filters */\n    if (newSearchTerm !== null) {\n      this.setState({\n        searchTerm: newSearchTerm,\n        selectedSuccessChance: null\n      });\n    } else {\n      this.setState({searchTerm: null});\n    }\n  }\n\n};\n\nexport default HSProgramList;\n"]},"metadata":{},"sourceType":"module"}