{"ast":null,"code":"import { connect } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { openProgramModal } from \"shared/redux/actions\";\nimport HSProgramList from \"./hs-program-list\";\n\nvar getProgramGroupDict = function getProgramGroupDict(state) {\n  return state.data.hsProgramGroups;\n};\n\nvar selectProgramGroups = createSelector([getProgramGroupDict], function (programGroupDict) {\n  // convert dictionary of program groups to an\n  // array of program groups alphabetically sorted by program\n  var programGroups = Object.keys(programGroupDict).map(function (groupID) {\n    return programGroupDict[groupID];\n  });\n  return programGroups.sort(function (groupA, groupB) {\n    return groupA.name.localeCompare(groupB.name);\n  });\n});\n\nvar getProgramDict = function getProgramDict(state) {\n  return state.data.hsPrograms;\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    programs: state.data.hsPrograms,\n    outcomes: state.programOutcomes,\n    programGroups: selectProgramGroups(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onSelectedProgramChange: function onSelectedProgramChange(program, outcome) {\n      dispatch(openProgramModal(program, outcome));\n    }\n  };\n};\n\nvar HSProgramsContainer = connect(mapStateToProps, mapDispatchToProps)(HSProgramList);\nexport default HSProgramsContainer;","map":{"version":3,"sources":["/home/michael/code/chavez-hs-planner/src/path-to-hs/components/hs-display/hs-programs-container.tsx"],"names":["connect","createSelector","openProgramModal","HSProgramList","getProgramGroupDict","state","data","hsProgramGroups","selectProgramGroups","programGroupDict","programGroups","Object","keys","map","groupID","sort","groupA","groupB","name","localeCompare","getProgramDict","hsPrograms","mapStateToProps","programs","outcomes","programOutcomes","mapDispatchToProps","dispatch","onSelectedProgramChange","program","outcome","HSProgramsContainer"],"mappings":"AACA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,UAA/B;AASA,SAASC,gBAAT,QAAiC,sBAAjC;AAIA,OAAOC,aAAP,MAA0B,mBAA1B;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD;AAAA,SAAqBA,KAAK,CAACC,IAAN,CAAWC,eAAhC;AAAA,CAA5B;;AACA,IAAMC,mBAAmB,GAAGP,cAAc,CACxC,CAACG,mBAAD,CADwC,EAExC,UAACK,gBAAD,EAAsC;AACpC;AACA;AAEA,MAAMC,aAA6B,GAAGC,MAAM,CAACC,IAAP,CAAYH,gBAAZ,EAA8BI,GAA9B,CAAmC,UAAAC,OAAO;AAAA,WAAIL,gBAAgB,CAACK,OAAD,CAApB;AAAA,GAA1C,CAAtC;AACA,SAAOJ,aAAa,CAACK,IAAd,CAAoB,UAACC,MAAD,EAASC,MAAT;AAAA,WAAoBD,MAAM,CAACE,IAAP,CAAYC,aAAZ,CAA0BF,MAAM,CAACC,IAAjC,CAApB;AAAA,GAApB,CAAP;AACD,CARuC,CAA1C;;AAWA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACf,KAAD;AAAA,SAAqBA,KAAK,CAACC,IAAN,CAAWe,UAAhC;AAAA,CAAvB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACjB,KAAD,EAAqB;AAC3C,SAAO;AACLkB,IAAAA,QAAQ,EAAElB,KAAK,CAACC,IAAN,CAAWe,UADhB;AAELG,IAAAA,QAAQ,EAAEnB,KAAK,CAACoB,eAFX;AAGLf,IAAAA,aAAa,EAAEF,mBAAmB,CAACH,KAAD;AAH7B,GAAP;AAKD,CAND;;AAQA,IAAMqB,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACvC,SAAO;AACLC,IAAAA,uBAAuB,EAAE,iCAACC,OAAD,EAAmBC,OAAnB,EAA2D;AAClFH,MAAAA,QAAQ,CAACzB,gBAAgB,CAAC2B,OAAD,EAAUC,OAAV,CAAjB,CAAR;AACD;AAHI,GAAP;AAKD,CAND;;AAQA,IAAMC,mBAAmB,GAAG/B,OAAO,CAACsB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CvB,aAA7C,CAA5B;AAEA,eAAe4B,mBAAf","sourcesContent":["import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createSelector } from \"reselect\";\n\nimport { \n  AppState,\n  Program,\n  ProgramOutcome,\n  ProgramGroup\n} from \"shared/types\";\n\nimport { openProgramModal } from \"shared/redux/actions\";\n\nimport { SuccessChance } from \"shared/enums\";\n\nimport HSProgramList from \"./hs-program-list\";\n\nconst getProgramGroupDict = (state: AppState) => state.data.hsProgramGroups;\nconst selectProgramGroups = createSelector(\n  [getProgramGroupDict],\n  (programGroupDict): ProgramGroup[] => {\n    // convert dictionary of program groups to an\n    // array of program groups alphabetically sorted by program\n    // group display name.\n    const programGroups: ProgramGroup[] = Object.keys(programGroupDict).map( groupID => programGroupDict[groupID] );\n    return programGroups.sort( (groupA, groupB) => groupA.name.localeCompare(groupB.name) );\n  }\n);\n\nconst getProgramDict = (state: AppState) => state.data.hsPrograms;\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    programs: state.data.hsPrograms,\n    outcomes: state.programOutcomes, \n    programGroups: selectProgramGroups(state),\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSelectedProgramChange: (program: Program, outcome: ProgramOutcome | undefined) => {\n      dispatch(openProgramModal(program, outcome))\n    }\n  }\n};\n\nconst HSProgramsContainer = connect(mapStateToProps, mapDispatchToProps)(HSProgramList);\n\nexport default HSProgramsContainer;\n\n\n"]},"metadata":{},"sourceType":"module"}