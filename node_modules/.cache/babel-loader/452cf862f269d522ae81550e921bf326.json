{"ast":null,"code":"export var createHSProgramDictionary = function createHSProgramDictionary(rawProgramData, requirementFunctions) {\n  var programDictionary = {};\n  var missing = {};\n  var unused = [];\n  rawProgramData.forEach(function (p) {\n    var applicationReqFn = requirementFunctions[p.applicationReqFnID];\n    var selectionReqFn = requirementFunctions[p.selectionReqFnID];\n\n    if (applicationReqFn === undefined) {\n      if (missing[p.applicationReqFnID] === undefined) {\n        missing[p.applicationReqFnID] = {\n          id: p.applicationReqFnID,\n          programs: [p.programName],\n          desc: p.applicationReqDescription,\n          fn: ''\n        };\n      } else {\n        missing[p.applicationReqFnID].programs.push(p.programName);\n      }\n    }\n\n    if (selectionReqFn === undefined) {\n      if (missing[p.selectionReqFnID] === undefined) {\n        missing[p.selectionReqFnID] = {\n          id: p.selectionReqFnID,\n          programs: [p.programName],\n          desc: p.selectionReqDescription,\n          fn: ''\n        };\n      } else {\n        missing[p.selectionReqFnID].programs.push(p.programName);\n      }\n    } // create a Program object from p by removing requirement\n    // function ids and replacing them with the actual requirement functions\n\n\n    var program = Object.assign({}, p, {\n      applicationReqFnID: undefined,\n      selectionReqFnID: undefined,\n      applicationReqFn: applicationReqFn,\n      selectionReqFn: selectionReqFn\n    }); // make an entry in programDictionary for each program\n\n    programDictionary[program.id] = program;\n  });\n\n  if (process.env.NODE_ENV === 'development') {\n    // find orphaned requirement functions, which are requirement functions\n    // that exist in the requirement function dictionary but are not needed by\n    // any of the programs in rawProgramData.\n    var reqFnIDs = Object.keys(requirementFunctions);\n    reqFnIDs.forEach(function (id) {\n      var isOrphaned = !rawProgramData.some(function (program) {\n        return program.applicationReqFnID === id || program.selectionReqFnID === id;\n      });\n\n      if (isOrphaned) {\n        unused.push(id);\n      }\n    });\n\n    if (unused.length > 0) {\n      console.warn(\"There are \".concat(unused.length, \" unused requirement functions.\\n\\nYou can safely remove them from the list of requirement functions in src/shared/requirement-functions/requirement-functions.ts. The IDs of the unused requirement functions are printed below:\"));\n      console.log(\"Orphaned:\");\n      console.log(JSON.stringify(unused, null, 2));\n    }\n\n    var numMissingReqFns = Object.keys(missing).length;\n\n    if (numMissingReqFns > 0) {\n      console.error(\"There are \".concat(numMissingReqFns, \" MISSING requirement functions.\\n\\nYou must write new implementations for these requirement functions in src/shared/requirement-functions/requirement-functions.ts. A template for the missing requirement functions is printed below.\"));\n      console.log(\"Missing:\");\n      console.log(JSON.stringify(missing, null, 2));\n    }\n  }\n\n  return programDictionary;\n};","map":{"version":3,"sources":["/home/michael/code/chavez-hs-planner/src/shared/redux/utils/create-hs-program-dictionary.ts"],"names":["createHSProgramDictionary","rawProgramData","requirementFunctions","programDictionary","missing","unused","forEach","p","applicationReqFn","applicationReqFnID","selectionReqFn","selectionReqFnID","undefined","id","programs","programName","desc","applicationReqDescription","fn","push","selectionReqDescription","program","Object","assign","process","env","NODE_ENV","reqFnIDs","keys","isOrphaned","some","length","console","warn","log","JSON","stringify","numMissingReqFns","error"],"mappings":"AAQA,OAAO,IAAMA,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,cAAD,EAA+BC,oBAA/B,EAA0G;AACjJ,MAAIC,iBAAoC,GAAG,EAA3C;AAEA,MAAIC,OAAY,GAAG,EAAnB;AACA,MAAIC,MAAW,GAAG,EAAlB;AAEAJ,EAAAA,cAAc,CAACK,OAAf,CAAwB,UAAAC,CAAC,EAAI;AAE3B,QAAMC,gBAAgB,GAAGN,oBAAoB,CAACK,CAAC,CAACE,kBAAH,CAA7C;AACA,QAAMC,cAAc,GAAGR,oBAAoB,CAACK,CAAC,CAACI,gBAAH,CAA3C;;AAEA,QAAIH,gBAAgB,KAAKI,SAAzB,EAAoC;AAClC,UAAIR,OAAO,CAACG,CAAC,CAACE,kBAAH,CAAP,KAAkCG,SAAtC,EAAiD;AAC/CR,QAAAA,OAAO,CAACG,CAAC,CAACE,kBAAH,CAAP,GAAgC;AAC9BI,UAAAA,EAAE,EAAEN,CAAC,CAACE,kBADwB;AAE9BK,UAAAA,QAAQ,EAAE,CAACP,CAAC,CAACQ,WAAH,CAFoB;AAG9BC,UAAAA,IAAI,EAAET,CAAC,CAACU,yBAHsB;AAI9BC,UAAAA,EAAE,EAAE;AAJ0B,SAAhC;AAMD,OAPD,MAOO;AACLd,QAAAA,OAAO,CAACG,CAAC,CAACE,kBAAH,CAAP,CAA8BK,QAA9B,CAAuCK,IAAvC,CAA4CZ,CAAC,CAACQ,WAA9C;AACD;AACF;;AACD,QAAIL,cAAc,KAAKE,SAAvB,EAAkC;AAChC,UAAIR,OAAO,CAACG,CAAC,CAACI,gBAAH,CAAP,KAAgCC,SAApC,EAA+C;AAC7CR,QAAAA,OAAO,CAACG,CAAC,CAACI,gBAAH,CAAP,GAA8B;AAC5BE,UAAAA,EAAE,EAAEN,CAAC,CAACI,gBADsB;AAE5BG,UAAAA,QAAQ,EAAE,CAACP,CAAC,CAACQ,WAAH,CAFkB;AAG5BC,UAAAA,IAAI,EAAET,CAAC,CAACa,uBAHoB;AAI5BF,UAAAA,EAAE,EAAE;AAJwB,SAA9B;AAMD,OAPD,MAOO;AACLd,QAAAA,OAAO,CAACG,CAAC,CAACI,gBAAH,CAAP,CAA4BG,QAA5B,CAAqCK,IAArC,CAA0CZ,CAAC,CAACQ,WAA5C;AACD;AACF,KA5B0B,CA8B3B;AACA;;;AACA,QAAMM,OAAgB,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBhB,CAAlB,EAAqB;AAC5CE,MAAAA,kBAAkB,EAAEG,SADwB;AAE5CD,MAAAA,gBAAgB,EAAEC,SAF0B;AAG5CJ,MAAAA,gBAAgB,EAAEA,gBAH0B;AAI5CE,MAAAA,cAAc,EAAEA;AAJ4B,KAArB,CAAzB,CAhC2B,CAuC3B;;AACAP,IAAAA,iBAAiB,CAACkB,OAAO,CAACR,EAAT,CAAjB,GAAgCQ,OAAhC;AACD,GAzCD;;AA2CA,MAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1C;AACA;AACA;AACA,QAAMC,QAAQ,GAAGL,MAAM,CAACM,IAAP,CAAY1B,oBAAZ,CAAjB;AACAyB,IAAAA,QAAQ,CAACrB,OAAT,CAAkB,UAAAO,EAAE,EAAI;AACtB,UAAMgB,UAAU,GAAG,CAAC5B,cAAc,CAAC6B,IAAf,CAAoB,UAAAT,OAAO;AAAA,eAAIA,OAAO,CAACZ,kBAAR,KAA+BI,EAA/B,IAAqCQ,OAAO,CAACV,gBAAR,KAA6BE,EAAtE;AAAA,OAA3B,CAApB;;AACA,UAAIgB,UAAJ,EAAgB;AACdxB,QAAAA,MAAM,CAACc,IAAP,CAAYN,EAAZ;AACD;AACF,KALD;;AAOA,QAAIR,MAAM,CAAC0B,MAAP,GAAgB,CAApB,EAAuB;AACrBC,MAAAA,OAAO,CAACC,IAAR,qBAA0B5B,MAAM,CAAC0B,MAAjC;AACAC,MAAAA,OAAO,CAACE,GAAR,CAAY,WAAZ;AACAF,MAAAA,OAAO,CAACE,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAe/B,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAZ;AACD;;AACD,QAAMgC,gBAAgB,GAAGf,MAAM,CAACM,IAAP,CAAYxB,OAAZ,EAAqB2B,MAA9C;;AACA,QAAIM,gBAAgB,GAAG,CAAvB,EAA0B;AACxBL,MAAAA,OAAO,CAACM,KAAR,qBAA2BD,gBAA3B;AACAL,MAAAA,OAAO,CAACE,GAAR,CAAY,UAAZ;AACAF,MAAAA,OAAO,CAACE,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAehC,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CAAZ;AACD;AACF;;AAED,SAAOD,iBAAP;AACD,CA3EM","sourcesContent":["import {\n  Program,\n  ProgramDictionary,\n  RawProgram,\n  RequirementFunctionDictionary\n} from \"../../../shared/types\";\n\n\nexport const createHSProgramDictionary = (rawProgramData: RawProgram[], requirementFunctions: RequirementFunctionDictionary): ProgramDictionary => {\n  let programDictionary: ProgramDictionary = {};\n\n  let missing: any = {};\n  let unused: any = [];\n\n  rawProgramData.forEach( p => {\n\n    const applicationReqFn = requirementFunctions[p.applicationReqFnID];\n    const selectionReqFn = requirementFunctions[p.selectionReqFnID];\n\n    if (applicationReqFn === undefined) {\n      if (missing[p.applicationReqFnID] === undefined) {\n        missing[p.applicationReqFnID] = {\n          id: p.applicationReqFnID,\n          programs: [p.programName],\n          desc: p.applicationReqDescription,\n          fn: ''\n        };\n      } else {\n        missing[p.applicationReqFnID].programs.push(p.programName);\n      }\n    }\n    if (selectionReqFn === undefined) {\n      if (missing[p.selectionReqFnID] === undefined) {\n        missing[p.selectionReqFnID] = {\n          id: p.selectionReqFnID,\n          programs: [p.programName],\n          desc: p.selectionReqDescription,\n          fn: ''\n        };\n      } else {\n        missing[p.selectionReqFnID].programs.push(p.programName);\n      }\n    }\n\n    // create a Program object from p by removing requirement\n    // function ids and replacing them with the actual requirement functions\n    const program: Program = Object.assign({}, p, {\n      applicationReqFnID: undefined,\n      selectionReqFnID: undefined,\n      applicationReqFn: applicationReqFn,\n      selectionReqFn: selectionReqFn\n    });\n\n    // make an entry in programDictionary for each program\n    programDictionary[program.id] = program;\n  });\n\n  if (process.env.NODE_ENV === 'development') {\n    // find orphaned requirement functions, which are requirement functions\n    // that exist in the requirement function dictionary but are not needed by\n    // any of the programs in rawProgramData.\n    const reqFnIDs = Object.keys(requirementFunctions);\n    reqFnIDs.forEach( id => {\n      const isOrphaned = !rawProgramData.some(program => program.applicationReqFnID === id || program.selectionReqFnID === id);\n      if (isOrphaned) {\n        unused.push(id);\n      }\n    });\n    \n    if (unused.length > 0) {\n      console.warn(`There are ${unused.length} unused requirement functions.\\n\\nYou can safely remove them from the list of requirement functions in src/shared/requirement-functions/requirement-functions.ts. The IDs of the unused requirement functions are printed below:`);\n      console.log(\"Orphaned:\");\n      console.log(JSON.stringify(unused, null, 2));\n    }\n    const numMissingReqFns = Object.keys(missing).length;\n    if (numMissingReqFns > 0) {\n      console.error(`There are ${numMissingReqFns} MISSING requirement functions.\\n\\nYou must write new implementations for these requirement functions in src/shared/requirement-functions/requirement-functions.ts. A template for the missing requirement functions is printed below.`);\n      console.log(\"Missing:\");\n      console.log(JSON.stringify(missing, null, 2));\n    }\n  }\n  \n  return programDictionary;\n};\n"]},"metadata":{},"sourceType":"module"}